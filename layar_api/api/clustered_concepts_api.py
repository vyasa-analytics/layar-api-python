# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from layar_api.api_client import ApiClient


class ClusteredConceptsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get(self, id, **kwargs):  # noqa: E501
        """clustered concept details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: ClusteredConcepts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_with_http_info(self, id, **kwargs):  # noqa: E501
        """clustered concept details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: ClusteredConcepts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/clusteredConcepts/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusteredConcepts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_concepts(self, clustered_query_id, cluster_id, **kwargs):  # noqa: E501
        """concepts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_concepts(clustered_query_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str clustered_query_id: (required)
        :param str cluster_id: (required)
        :param int rows: the number of rows to return
        :param int start: the start offset for the row
        :param str sort: sort results by the given property
        :param str order: what order to return sorted results
        :return: list[Concept]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_concepts_with_http_info(clustered_query_id, cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_concepts_with_http_info(clustered_query_id, cluster_id, **kwargs)  # noqa: E501
            return data

    def get_concepts_with_http_info(self, clustered_query_id, cluster_id, **kwargs):  # noqa: E501
        """concepts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_concepts_with_http_info(clustered_query_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str clustered_query_id: (required)
        :param str cluster_id: (required)
        :param int rows: the number of rows to return
        :param int start: the start offset for the row
        :param str sort: sort results by the given property
        :param str order: what order to return sorted results
        :return: list[Concept]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['clustered_query_id', 'cluster_id', 'rows', 'start', 'sort', 'order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_concepts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'clustered_query_id' is set
        if ('clustered_query_id' not in params or
                params['clustered_query_id'] is None):
            raise ValueError("Missing the required parameter `clustered_query_id` when calling `get_concepts`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_concepts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'clustered_query_id' in params:
            path_params['clusteredQueryId'] = params['clustered_query_id']  # noqa: E501
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/clusteredConcepts/{clusteredQueryId}/{clusterId}/concepts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Concept]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_graph(self, clustered_query_id, **kwargs):  # noqa: E501
        """graph  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph(clustered_query_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str clustered_query_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_graph_with_http_info(clustered_query_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_graph_with_http_info(clustered_query_id, **kwargs)  # noqa: E501
            return data

    def get_graph_with_http_info(self, clustered_query_id, **kwargs):  # noqa: E501
        """graph  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_with_http_info(clustered_query_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str clustered_query_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['clustered_query_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_graph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'clustered_query_id' is set
        if ('clustered_query_id' not in params or
                params['clustered_query_id'] is None):
            raise ValueError("Missing the required parameter `clustered_query_id` when calling `get_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'clustered_query_id' in params:
            path_params['clusteredQueryId'] = params['clustered_query_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/clusteredConcepts/{clusteredQueryId}/graph', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_relationships(self, clustered_query_id, **kwargs):  # noqa: E501
        """relationships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_relationships(clustered_query_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str clustered_query_id: (required)
        :param int rows: the number of rows to return
        :return: list[ConceptRelationship]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_relationships_with_http_info(clustered_query_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_relationships_with_http_info(clustered_query_id, **kwargs)  # noqa: E501
            return data

    def get_relationships_with_http_info(self, clustered_query_id, **kwargs):  # noqa: E501
        """relationships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_relationships_with_http_info(clustered_query_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str clustered_query_id: (required)
        :param int rows: the number of rows to return
        :return: list[ConceptRelationship]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['clustered_query_id', 'rows']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_relationships" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'clustered_query_id' is set
        if ('clustered_query_id' not in params or
                params['clustered_query_id'] is None):
            raise ValueError("Missing the required parameter `clustered_query_id` when calling `get_relationships`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'clustered_query_id' in params:
            path_params['clusteredQueryId'] = params['clustered_query_id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/clusteredConcepts/{clusteredQueryId}/relationships', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ConceptRelationship]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
