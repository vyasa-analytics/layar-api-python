# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: AI-Support@Certara.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConceptQueryParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order': 'str',
        'relevancy_max': 'int',
        'relevancy_min': 'int',
        'rows': 'int',
        'sort': 'str',
        'start': 'int'
    }

    attribute_map = {
        'order': 'order',
        'relevancy_max': 'relevancyMax',
        'relevancy_min': 'relevancyMin',
        'rows': 'rows',
        'sort': 'sort',
        'start': 'start'
    }

    def __init__(self, order=None, relevancy_max=None, relevancy_min=None, rows=None, sort=None, start=None):  # noqa: E501
        """ConceptQueryParams - a model defined in Swagger"""  # noqa: E501
        self._order = None
        self._relevancy_max = None
        self._relevancy_min = None
        self._rows = None
        self._sort = None
        self._start = None
        self.discriminator = None
        if order is not None:
            self.order = order
        if relevancy_max is not None:
            self.relevancy_max = relevancy_max
        if relevancy_min is not None:
            self.relevancy_min = relevancy_min
        if rows is not None:
            self.rows = rows
        if sort is not None:
            self.sort = sort
        if start is not None:
            self.start = start

    @property
    def order(self):
        """Gets the order of this ConceptQueryParams.  # noqa: E501


        :return: The order of this ConceptQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ConceptQueryParams.


        :param order: The order of this ConceptQueryParams.  # noqa: E501
        :type: str
        """

        self._order = order

    @property
    def relevancy_max(self):
        """Gets the relevancy_max of this ConceptQueryParams.  # noqa: E501


        :return: The relevancy_max of this ConceptQueryParams.  # noqa: E501
        :rtype: int
        """
        return self._relevancy_max

    @relevancy_max.setter
    def relevancy_max(self, relevancy_max):
        """Sets the relevancy_max of this ConceptQueryParams.


        :param relevancy_max: The relevancy_max of this ConceptQueryParams.  # noqa: E501
        :type: int
        """

        self._relevancy_max = relevancy_max

    @property
    def relevancy_min(self):
        """Gets the relevancy_min of this ConceptQueryParams.  # noqa: E501


        :return: The relevancy_min of this ConceptQueryParams.  # noqa: E501
        :rtype: int
        """
        return self._relevancy_min

    @relevancy_min.setter
    def relevancy_min(self, relevancy_min):
        """Sets the relevancy_min of this ConceptQueryParams.


        :param relevancy_min: The relevancy_min of this ConceptQueryParams.  # noqa: E501
        :type: int
        """

        self._relevancy_min = relevancy_min

    @property
    def rows(self):
        """Gets the rows of this ConceptQueryParams.  # noqa: E501


        :return: The rows of this ConceptQueryParams.  # noqa: E501
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this ConceptQueryParams.


        :param rows: The rows of this ConceptQueryParams.  # noqa: E501
        :type: int
        """

        self._rows = rows

    @property
    def sort(self):
        """Gets the sort of this ConceptQueryParams.  # noqa: E501


        :return: The sort of this ConceptQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ConceptQueryParams.


        :param sort: The sort of this ConceptQueryParams.  # noqa: E501
        :type: str
        """

        self._sort = sort

    @property
    def start(self):
        """Gets the start of this ConceptQueryParams.  # noqa: E501


        :return: The start of this ConceptQueryParams.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ConceptQueryParams.


        :param start: The start of this ConceptQueryParams.  # noqa: E501
        :type: int
        """

        self._start = start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConceptQueryParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConceptQueryParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
