# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: support@vyasa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Body8(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'label': 'str',
        'parent': 'str',
        'synonyms': 'list[str]',
        'properties': 'list[str]',
        'delimiter': 'str',
        'start_row': 'int'
    }

    attribute_map = {
        'name': 'name',
        'label': 'label',
        'parent': 'parent',
        'synonyms': 'synonyms',
        'properties': 'properties',
        'delimiter': 'delimiter',
        'start_row': 'startRow'
    }

    def __init__(self, name=None, label=None, parent=None, synonyms=None, properties=None, delimiter=None, start_row=None):  # noqa: E501
        """Body8 - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._label = None
        self._parent = None
        self._synonyms = None
        self._properties = None
        self._delimiter = None
        self._start_row = None
        self.discriminator = None
        self.name = name
        self.label = label
        if parent is not None:
            self.parent = parent
        if synonyms is not None:
            self.synonyms = synonyms
        if properties is not None:
            self.properties = properties
        if delimiter is not None:
            self.delimiter = delimiter
        if start_row is not None:
            self.start_row = start_row

    @property
    def name(self):
        """Gets the name of this Body8.  # noqa: E501

        Provide a name for the new ontology  # noqa: E501

        :return: The name of this Body8.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Body8.

        Provide a name for the new ontology  # noqa: E501

        :param name: The name of this Body8.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def label(self):
        """Gets the label of this Body8.  # noqa: E501

        The column key to use when creating term labels  # noqa: E501

        :return: The label of this Body8.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Body8.

        The column key to use when creating term labels  # noqa: E501

        :param label: The label of this Body8.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def parent(self):
        """Gets the parent of this Body8.  # noqa: E501

        The column key to use for creating hierarchical relationships. The value in this cell should match the ID value of another row in the table.  # noqa: E501

        :return: The parent of this Body8.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Body8.

        The column key to use for creating hierarchical relationships. The value in this cell should match the ID value of another row in the table.  # noqa: E501

        :param parent: The parent of this Body8.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def synonyms(self):
        """Gets the synonyms of this Body8.  # noqa: E501

        The column key(s) to use when creating term synonyms  # noqa: E501

        :return: The synonyms of this Body8.  # noqa: E501
        :rtype: list[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this Body8.

        The column key(s) to use when creating term synonyms  # noqa: E501

        :param synonyms: The synonyms of this Body8.  # noqa: E501
        :type: list[str]
        """

        self._synonyms = synonyms

    @property
    def properties(self):
        """Gets the properties of this Body8.  # noqa: E501

        The column keys(s) to use when creating term properties  # noqa: E501

        :return: The properties of this Body8.  # noqa: E501
        :rtype: list[str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Body8.

        The column keys(s) to use when creating term properties  # noqa: E501

        :param properties: The properties of this Body8.  # noqa: E501
        :type: list[str]
        """

        self._properties = properties

    @property
    def delimiter(self):
        """Gets the delimiter of this Body8.  # noqa: E501

        If term synonyms are collected in a single column, please provide a delimiter to separate each one  # noqa: E501

        :return: The delimiter of this Body8.  # noqa: E501
        :rtype: str
        """
        return self._delimiter

    @delimiter.setter
    def delimiter(self, delimiter):
        """Sets the delimiter of this Body8.

        If term synonyms are collected in a single column, please provide a delimiter to separate each one  # noqa: E501

        :param delimiter: The delimiter of this Body8.  # noqa: E501
        :type: str
        """

        self._delimiter = delimiter

    @property
    def start_row(self):
        """Gets the start_row of this Body8.  # noqa: E501

        The first row with ontology term data (and not a header row). Defaults to 0.  # noqa: E501

        :return: The start_row of this Body8.  # noqa: E501
        :rtype: int
        """
        return self._start_row

    @start_row.setter
    def start_row(self, start_row):
        """Sets the start_row of this Body8.

        The first row with ontology term data (and not a header row). Defaults to 0.  # noqa: E501

        :param start_row: The start_row of this Body8.  # noqa: E501
        :type: int
        """

        self._start_row = start_row

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body8, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body8):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
