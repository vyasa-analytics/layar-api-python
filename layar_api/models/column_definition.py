# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: support@vyasa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ColumnDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'concept_assignment': 'ConceptAssignment',
        'data_type': 'str',
        'key': 'str',
        'name': 'str',
        'order': 'int',
        'column_type': 'DynamicColumnType',
        'ref_column_id': 'str',
        'search': 'SourceDocumentSearchCommand'
    }

    attribute_map = {
        'concept_assignment': 'conceptAssignment',
        'data_type': 'dataType',
        'key': 'key',
        'name': 'name',
        'order': 'order',
        'column_type': 'columnType',
        'ref_column_id': 'refColumnId',
        'search': 'search'
    }

    def __init__(self, concept_assignment=None, data_type=None, key=None, name=None, order=None, column_type=None, ref_column_id=None, search=None):  # noqa: E501
        """ColumnDefinition - a model defined in Swagger"""  # noqa: E501
        self._concept_assignment = None
        self._data_type = None
        self._key = None
        self._name = None
        self._order = None
        self._column_type = None
        self._ref_column_id = None
        self._search = None
        self.discriminator = None
        if concept_assignment is not None:
            self.concept_assignment = concept_assignment
        if data_type is not None:
            self.data_type = data_type
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if order is not None:
            self.order = order
        if column_type is not None:
            self.column_type = column_type
        if ref_column_id is not None:
            self.ref_column_id = ref_column_id
        if search is not None:
            self.search = search

    @property
    def concept_assignment(self):
        """Gets the concept_assignment of this ColumnDefinition.  # noqa: E501


        :return: The concept_assignment of this ColumnDefinition.  # noqa: E501
        :rtype: ConceptAssignment
        """
        return self._concept_assignment

    @concept_assignment.setter
    def concept_assignment(self, concept_assignment):
        """Sets the concept_assignment of this ColumnDefinition.


        :param concept_assignment: The concept_assignment of this ColumnDefinition.  # noqa: E501
        :type: ConceptAssignment
        """

        self._concept_assignment = concept_assignment

    @property
    def data_type(self):
        """Gets the data_type of this ColumnDefinition.  # noqa: E501


        :return: The data_type of this ColumnDefinition.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ColumnDefinition.


        :param data_type: The data_type of this ColumnDefinition.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def key(self):
        """Gets the key of this ColumnDefinition.  # noqa: E501


        :return: The key of this ColumnDefinition.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ColumnDefinition.


        :param key: The key of this ColumnDefinition.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this ColumnDefinition.  # noqa: E501


        :return: The name of this ColumnDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ColumnDefinition.


        :param name: The name of this ColumnDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this ColumnDefinition.  # noqa: E501


        :return: The order of this ColumnDefinition.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ColumnDefinition.


        :param order: The order of this ColumnDefinition.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def column_type(self):
        """Gets the column_type of this ColumnDefinition.  # noqa: E501


        :return: The column_type of this ColumnDefinition.  # noqa: E501
        :rtype: DynamicColumnType
        """
        return self._column_type

    @column_type.setter
    def column_type(self, column_type):
        """Sets the column_type of this ColumnDefinition.


        :param column_type: The column_type of this ColumnDefinition.  # noqa: E501
        :type: DynamicColumnType
        """

        self._column_type = column_type

    @property
    def ref_column_id(self):
        """Gets the ref_column_id of this ColumnDefinition.  # noqa: E501


        :return: The ref_column_id of this ColumnDefinition.  # noqa: E501
        :rtype: str
        """
        return self._ref_column_id

    @ref_column_id.setter
    def ref_column_id(self, ref_column_id):
        """Sets the ref_column_id of this ColumnDefinition.


        :param ref_column_id: The ref_column_id of this ColumnDefinition.  # noqa: E501
        :type: str
        """

        self._ref_column_id = ref_column_id

    @property
    def search(self):
        """Gets the search of this ColumnDefinition.  # noqa: E501


        :return: The search of this ColumnDefinition.  # noqa: E501
        :rtype: SourceDocumentSearchCommand
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this ColumnDefinition.


        :param search: The search of this ColumnDefinition.  # noqa: E501
        :type: SourceDocumentSearchCommand
        """

        self._search = search

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ColumnDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ColumnDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
