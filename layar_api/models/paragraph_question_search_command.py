# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from layar_api.models.base_search_command import BaseSearchCommand  # noqa: F401,E501

class ParagraphQuestionSearchCommand(BaseSearchCommand):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'paragraph_search_command': 'ParagraphSearchCommand',
        'query_clauses': 'list[str]',
        'source_document_search_command': 'SourceDocumentSearchCommand'
    }
    if hasattr(BaseSearchCommand, "swagger_types"):
        swagger_types.update(BaseSearchCommand.swagger_types)

    attribute_map = {
        'paragraph_search_command': 'paragraphSearchCommand',
        'query_clauses': 'queryClauses',
        'source_document_search_command': 'SourceDocumentSearchCommand'
    }
    if hasattr(BaseSearchCommand, "attribute_map"):
        attribute_map.update(BaseSearchCommand.attribute_map)

    def __init__(self, paragraph_search_command=None, query_clauses=None, source_document_search_command=None, *args, **kwargs):  # noqa: E501
        """ParagraphQuestionSearchCommand - a model defined in Swagger"""  # noqa: E501
        self._paragraph_search_command = None
        self._query_clauses = None
        self._source_document_search_command = None
        self.discriminator = None
        if paragraph_search_command is not None:
            self.paragraph_search_command = paragraph_search_command
        if query_clauses is not None:
            self.query_clauses = query_clauses
        if source_document_search_command is not None:
            self.source_document_search_command = source_document_search_command
        BaseSearchCommand.__init__(self, *args, **kwargs)

    @property
    def paragraph_search_command(self):
        """Gets the paragraph_search_command of this ParagraphQuestionSearchCommand.  # noqa: E501


        :return: The paragraph_search_command of this ParagraphQuestionSearchCommand.  # noqa: E501
        :rtype: ParagraphSearchCommand
        """
        return self._paragraph_search_command

    @paragraph_search_command.setter
    def paragraph_search_command(self, paragraph_search_command):
        """Sets the paragraph_search_command of this ParagraphQuestionSearchCommand.


        :param paragraph_search_command: The paragraph_search_command of this ParagraphQuestionSearchCommand.  # noqa: E501
        :type: ParagraphSearchCommand
        """

        self._paragraph_search_command = paragraph_search_command

    @property
    def query_clauses(self):
        """Gets the query_clauses of this ParagraphQuestionSearchCommand.  # noqa: E501


        :return: The query_clauses of this ParagraphQuestionSearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._query_clauses

    @query_clauses.setter
    def query_clauses(self, query_clauses):
        """Sets the query_clauses of this ParagraphQuestionSearchCommand.


        :param query_clauses: The query_clauses of this ParagraphQuestionSearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._query_clauses = query_clauses

    @property
    def source_document_search_command(self):
        """Gets the source_document_search_command of this ParagraphQuestionSearchCommand.  # noqa: E501


        :return: The source_document_search_command of this ParagraphQuestionSearchCommand.  # noqa: E501
        :rtype: SourceDocumentSearchCommand
        """
        return self._source_document_search_command

    @source_document_search_command.setter
    def source_document_search_command(self, source_document_search_command):
        """Sets the source_document_search_command of this ParagraphQuestionSearchCommand.


        :param source_document_search_command: The source_document_search_command of this ParagraphQuestionSearchCommand.  # noqa: E501
        :type: SourceDocumentSearchCommand
        """

        self._source_document_search_command = source_document_search_command

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParagraphQuestionSearchCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParagraphQuestionSearchCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
