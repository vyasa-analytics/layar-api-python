# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: AI-Support@Certara.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CortexSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by_user': 'int',
        'date_indexed': 'datetime',
        'id': 'str',
        'name': 'str',
        'setting_name': 'str',
        'setting_string_value': 'str'
    }

    attribute_map = {
        'created_by_user': 'createdByUser',
        'date_indexed': 'dateIndexed',
        'id': 'id',
        'name': 'name',
        'setting_name': 'settingName',
        'setting_string_value': 'settingStringValue'
    }

    def __init__(self, created_by_user=None, date_indexed=None, id=None, name=None, setting_name=None, setting_string_value=None):  # noqa: E501
        """CortexSetting - a model defined in Swagger"""  # noqa: E501
        self._created_by_user = None
        self._date_indexed = None
        self._id = None
        self._name = None
        self._setting_name = None
        self._setting_string_value = None
        self.discriminator = None
        if created_by_user is not None:
            self.created_by_user = created_by_user
        if date_indexed is not None:
            self.date_indexed = date_indexed
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if setting_name is not None:
            self.setting_name = setting_name
        if setting_string_value is not None:
            self.setting_string_value = setting_string_value

    @property
    def created_by_user(self):
        """Gets the created_by_user of this CortexSetting.  # noqa: E501


        :return: The created_by_user of this CortexSetting.  # noqa: E501
        :rtype: int
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this CortexSetting.


        :param created_by_user: The created_by_user of this CortexSetting.  # noqa: E501
        :type: int
        """

        self._created_by_user = created_by_user

    @property
    def date_indexed(self):
        """Gets the date_indexed of this CortexSetting.  # noqa: E501


        :return: The date_indexed of this CortexSetting.  # noqa: E501
        :rtype: datetime
        """
        return self._date_indexed

    @date_indexed.setter
    def date_indexed(self, date_indexed):
        """Sets the date_indexed of this CortexSetting.


        :param date_indexed: The date_indexed of this CortexSetting.  # noqa: E501
        :type: datetime
        """

        self._date_indexed = date_indexed

    @property
    def id(self):
        """Gets the id of this CortexSetting.  # noqa: E501


        :return: The id of this CortexSetting.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CortexSetting.


        :param id: The id of this CortexSetting.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CortexSetting.  # noqa: E501


        :return: The name of this CortexSetting.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CortexSetting.


        :param name: The name of this CortexSetting.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def setting_name(self):
        """Gets the setting_name of this CortexSetting.  # noqa: E501


        :return: The setting_name of this CortexSetting.  # noqa: E501
        :rtype: str
        """
        return self._setting_name

    @setting_name.setter
    def setting_name(self, setting_name):
        """Sets the setting_name of this CortexSetting.


        :param setting_name: The setting_name of this CortexSetting.  # noqa: E501
        :type: str
        """

        self._setting_name = setting_name

    @property
    def setting_string_value(self):
        """Gets the setting_string_value of this CortexSetting.  # noqa: E501


        :return: The setting_string_value of this CortexSetting.  # noqa: E501
        :rtype: str
        """
        return self._setting_string_value

    @setting_string_value.setter
    def setting_string_value(self, setting_string_value):
        """Sets the setting_string_value of this CortexSetting.


        :param setting_string_value: The setting_string_value of this CortexSetting.  # noqa: E501
        :type: str
        """

        self._setting_string_value = setting_string_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CortexSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CortexSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
