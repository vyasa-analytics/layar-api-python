# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: support@vyasa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Annotation2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_id': 'str',
        'key': 'str',
        'value_string': 'str',
        'value_double': 'float',
        'value_boolean': 'bool',
        'value_integer': 'int',
        'value_date': 'datetime',
        'value_type': 'str'
    }

    attribute_map = {
        'source_id': 'sourceId',
        'key': 'key',
        'value_string': 'valueString',
        'value_double': 'valueDouble',
        'value_boolean': 'valueBoolean',
        'value_integer': 'valueInteger',
        'value_date': 'valueDate',
        'value_type': 'valueType'
    }

    def __init__(self, source_id=None, key=None, value_string=None, value_double=None, value_boolean=None, value_integer=None, value_date=None, value_type=None):  # noqa: E501
        """Annotation2 - a model defined in Swagger"""  # noqa: E501
        self._source_id = None
        self._key = None
        self._value_string = None
        self._value_double = None
        self._value_boolean = None
        self._value_integer = None
        self._value_date = None
        self._value_type = None
        self.discriminator = None
        if source_id is not None:
            self.source_id = source_id
        if key is not None:
            self.key = key
        if value_string is not None:
            self.value_string = value_string
        if value_double is not None:
            self.value_double = value_double
        if value_boolean is not None:
            self.value_boolean = value_boolean
        if value_integer is not None:
            self.value_integer = value_integer
        if value_date is not None:
            self.value_date = value_date
        if value_type is not None:
            self.value_type = value_type

    @property
    def source_id(self):
        """Gets the source_id of this Annotation2.  # noqa: E501


        :return: The source_id of this Annotation2.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Annotation2.


        :param source_id: The source_id of this Annotation2.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def key(self):
        """Gets the key of this Annotation2.  # noqa: E501


        :return: The key of this Annotation2.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Annotation2.


        :param key: The key of this Annotation2.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def value_string(self):
        """Gets the value_string of this Annotation2.  # noqa: E501


        :return: The value_string of this Annotation2.  # noqa: E501
        :rtype: str
        """
        return self._value_string

    @value_string.setter
    def value_string(self, value_string):
        """Sets the value_string of this Annotation2.


        :param value_string: The value_string of this Annotation2.  # noqa: E501
        :type: str
        """

        self._value_string = value_string

    @property
    def value_double(self):
        """Gets the value_double of this Annotation2.  # noqa: E501


        :return: The value_double of this Annotation2.  # noqa: E501
        :rtype: float
        """
        return self._value_double

    @value_double.setter
    def value_double(self, value_double):
        """Sets the value_double of this Annotation2.


        :param value_double: The value_double of this Annotation2.  # noqa: E501
        :type: float
        """

        self._value_double = value_double

    @property
    def value_boolean(self):
        """Gets the value_boolean of this Annotation2.  # noqa: E501


        :return: The value_boolean of this Annotation2.  # noqa: E501
        :rtype: bool
        """
        return self._value_boolean

    @value_boolean.setter
    def value_boolean(self, value_boolean):
        """Sets the value_boolean of this Annotation2.


        :param value_boolean: The value_boolean of this Annotation2.  # noqa: E501
        :type: bool
        """

        self._value_boolean = value_boolean

    @property
    def value_integer(self):
        """Gets the value_integer of this Annotation2.  # noqa: E501


        :return: The value_integer of this Annotation2.  # noqa: E501
        :rtype: int
        """
        return self._value_integer

    @value_integer.setter
    def value_integer(self, value_integer):
        """Sets the value_integer of this Annotation2.


        :param value_integer: The value_integer of this Annotation2.  # noqa: E501
        :type: int
        """

        self._value_integer = value_integer

    @property
    def value_date(self):
        """Gets the value_date of this Annotation2.  # noqa: E501


        :return: The value_date of this Annotation2.  # noqa: E501
        :rtype: datetime
        """
        return self._value_date

    @value_date.setter
    def value_date(self, value_date):
        """Sets the value_date of this Annotation2.


        :param value_date: The value_date of this Annotation2.  # noqa: E501
        :type: datetime
        """

        self._value_date = value_date

    @property
    def value_type(self):
        """Gets the value_type of this Annotation2.  # noqa: E501


        :return: The value_type of this Annotation2.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this Annotation2.


        :param value_type: The value_type of this Annotation2.  # noqa: E501
        :type: str
        """
        allowed_values = ["STRING", "BOOLEAN", "INTEGER", "LONG", "DOUBLE", "DATE"]  # noqa: E501
        if value_type not in allowed_values:
            raise ValueError(
                "Invalid value for `value_type` ({0}), must be one of {1}"  # noqa: E501
                .format(value_type, allowed_values)
            )

        self._value_type = value_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Annotation2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Annotation2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
