# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SourceDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'append_to_existing': 'bool',
        'column_definitions': 'list[ColumnDefinition]',
        'annotations': 'list[Annotation]',
        'cortex_document_type': 'SourceDocumentType',
        'created_by_user': 'int',
        'date_indexed': 'datetime',
        'document_uri': 'str',
        'entity_count': 'int',
        'external_ids': 'object',
        'trial_data': 'object',
        'file': 'str',
        'id': 'str',
        'live_source': 'LiveSource',
        'metadata': 'object',
        'mime_type': 'str',
        'name': 'str',
        'object_key': 'str',
        'parent_source_document_id': 'str',
        'project_computation_id': 'str',
        'projects': 'list[str]',
        'raw_text': 'str',
        'statement_count': 'int',
        'suggested_category_id': 'str',
        'suggested_category_ids': 'list[str]',
        'suggested_category_rankings': 'object',
        'summary': 'str',
        'tabular_based_on_file_name': 'bool',
        'url': 'str',
        'has_vector': 'bool',
        'highlighted_text': 'list[str]'
    }

    attribute_map = {
        'append_to_existing': 'appendToExisting',
        'column_definitions': 'columnDefinitions',
        'annotations': 'annotations',
        'cortex_document_type': 'cortexDocumentType',
        'created_by_user': 'createdByUser',
        'date_indexed': 'dateIndexed',
        'document_uri': 'documentURI',
        'entity_count': 'entityCount',
        'external_ids': 'externalIds',
        'trial_data': 'trialData',
        'file': 'file',
        'id': 'id',
        'live_source': 'liveSource',
        'metadata': 'metadata',
        'mime_type': 'mimeType',
        'name': 'name',
        'object_key': 'objectKey',
        'parent_source_document_id': 'parentSourceDocumentId',
        'project_computation_id': 'projectComputationId',
        'projects': 'projects',
        'raw_text': 'rawText',
        'statement_count': 'statementCount',
        'suggested_category_id': 'suggestedCategoryId',
        'suggested_category_ids': 'suggestedCategoryIds',
        'suggested_category_rankings': 'suggestedCategoryRankings',
        'summary': 'summary',
        'tabular_based_on_file_name': 'tabularBasedOnFileName',
        'url': 'url',
        'has_vector': 'hasVector',
        'highlighted_text': 'highlightedText'
    }

    def __init__(self, append_to_existing=None, column_definitions=None, annotations=None, cortex_document_type=None, created_by_user=None, date_indexed=None, document_uri=None, entity_count=None, external_ids=None, trial_data=None, file=None, id=None, live_source=None, metadata=None, mime_type=None, name=None, object_key=None, parent_source_document_id=None, project_computation_id=None, projects=None, raw_text=None, statement_count=None, suggested_category_id=None, suggested_category_ids=None, suggested_category_rankings=None, summary=None, tabular_based_on_file_name=None, url=None, has_vector=None, highlighted_text=None):  # noqa: E501
        """SourceDocument - a model defined in Swagger"""  # noqa: E501
        self._append_to_existing = None
        self._column_definitions = None
        self._annotations = None
        self._cortex_document_type = None
        self._created_by_user = None
        self._date_indexed = None
        self._document_uri = None
        self._entity_count = None
        self._external_ids = None
        self._trial_data = None
        self._file = None
        self._id = None
        self._live_source = None
        self._metadata = None
        self._mime_type = None
        self._name = None
        self._object_key = None
        self._parent_source_document_id = None
        self._project_computation_id = None
        self._projects = None
        self._raw_text = None
        self._statement_count = None
        self._suggested_category_id = None
        self._suggested_category_ids = None
        self._suggested_category_rankings = None
        self._summary = None
        self._tabular_based_on_file_name = None
        self._url = None
        self._has_vector = None
        self._highlighted_text = None
        self.discriminator = None
        if append_to_existing is not None:
            self.append_to_existing = append_to_existing
        if column_definitions is not None:
            self.column_definitions = column_definitions
        if annotations is not None:
            self.annotations = annotations
        if cortex_document_type is not None:
            self.cortex_document_type = cortex_document_type
        if created_by_user is not None:
            self.created_by_user = created_by_user
        if date_indexed is not None:
            self.date_indexed = date_indexed
        if document_uri is not None:
            self.document_uri = document_uri
        if entity_count is not None:
            self.entity_count = entity_count
        if external_ids is not None:
            self.external_ids = external_ids
        if trial_data is not None:
            self.trial_data = trial_data
        if file is not None:
            self.file = file
        if id is not None:
            self.id = id
        if live_source is not None:
            self.live_source = live_source
        if metadata is not None:
            self.metadata = metadata
        if mime_type is not None:
            self.mime_type = mime_type
        if name is not None:
            self.name = name
        if object_key is not None:
            self.object_key = object_key
        if parent_source_document_id is not None:
            self.parent_source_document_id = parent_source_document_id
        if project_computation_id is not None:
            self.project_computation_id = project_computation_id
        if projects is not None:
            self.projects = projects
        if raw_text is not None:
            self.raw_text = raw_text
        if statement_count is not None:
            self.statement_count = statement_count
        if suggested_category_id is not None:
            self.suggested_category_id = suggested_category_id
        if suggested_category_ids is not None:
            self.suggested_category_ids = suggested_category_ids
        if suggested_category_rankings is not None:
            self.suggested_category_rankings = suggested_category_rankings
        if summary is not None:
            self.summary = summary
        if tabular_based_on_file_name is not None:
            self.tabular_based_on_file_name = tabular_based_on_file_name
        if url is not None:
            self.url = url
        if has_vector is not None:
            self.has_vector = has_vector
        if highlighted_text is not None:
            self.highlighted_text = highlighted_text

    @property
    def append_to_existing(self):
        """Gets the append_to_existing of this SourceDocument.  # noqa: E501


        :return: The append_to_existing of this SourceDocument.  # noqa: E501
        :rtype: bool
        """
        return self._append_to_existing

    @append_to_existing.setter
    def append_to_existing(self, append_to_existing):
        """Sets the append_to_existing of this SourceDocument.


        :param append_to_existing: The append_to_existing of this SourceDocument.  # noqa: E501
        :type: bool
        """

        self._append_to_existing = append_to_existing

    @property
    def column_definitions(self):
        """Gets the column_definitions of this SourceDocument.  # noqa: E501


        :return: The column_definitions of this SourceDocument.  # noqa: E501
        :rtype: list[ColumnDefinition]
        """
        return self._column_definitions

    @column_definitions.setter
    def column_definitions(self, column_definitions):
        """Sets the column_definitions of this SourceDocument.


        :param column_definitions: The column_definitions of this SourceDocument.  # noqa: E501
        :type: list[ColumnDefinition]
        """

        self._column_definitions = column_definitions

    @property
    def annotations(self):
        """Gets the annotations of this SourceDocument.  # noqa: E501


        :return: The annotations of this SourceDocument.  # noqa: E501
        :rtype: list[Annotation]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this SourceDocument.


        :param annotations: The annotations of this SourceDocument.  # noqa: E501
        :type: list[Annotation]
        """

        self._annotations = annotations

    @property
    def cortex_document_type(self):
        """Gets the cortex_document_type of this SourceDocument.  # noqa: E501


        :return: The cortex_document_type of this SourceDocument.  # noqa: E501
        :rtype: SourceDocumentType
        """
        return self._cortex_document_type

    @cortex_document_type.setter
    def cortex_document_type(self, cortex_document_type):
        """Sets the cortex_document_type of this SourceDocument.


        :param cortex_document_type: The cortex_document_type of this SourceDocument.  # noqa: E501
        :type: SourceDocumentType
        """

        self._cortex_document_type = cortex_document_type

    @property
    def created_by_user(self):
        """Gets the created_by_user of this SourceDocument.  # noqa: E501


        :return: The created_by_user of this SourceDocument.  # noqa: E501
        :rtype: int
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this SourceDocument.


        :param created_by_user: The created_by_user of this SourceDocument.  # noqa: E501
        :type: int
        """

        self._created_by_user = created_by_user

    @property
    def date_indexed(self):
        """Gets the date_indexed of this SourceDocument.  # noqa: E501


        :return: The date_indexed of this SourceDocument.  # noqa: E501
        :rtype: datetime
        """
        return self._date_indexed

    @date_indexed.setter
    def date_indexed(self, date_indexed):
        """Sets the date_indexed of this SourceDocument.


        :param date_indexed: The date_indexed of this SourceDocument.  # noqa: E501
        :type: datetime
        """

        self._date_indexed = date_indexed

    @property
    def document_uri(self):
        """Gets the document_uri of this SourceDocument.  # noqa: E501


        :return: The document_uri of this SourceDocument.  # noqa: E501
        :rtype: str
        """
        return self._document_uri

    @document_uri.setter
    def document_uri(self, document_uri):
        """Sets the document_uri of this SourceDocument.


        :param document_uri: The document_uri of this SourceDocument.  # noqa: E501
        :type: str
        """

        self._document_uri = document_uri

    @property
    def entity_count(self):
        """Gets the entity_count of this SourceDocument.  # noqa: E501


        :return: The entity_count of this SourceDocument.  # noqa: E501
        :rtype: int
        """
        return self._entity_count

    @entity_count.setter
    def entity_count(self, entity_count):
        """Sets the entity_count of this SourceDocument.


        :param entity_count: The entity_count of this SourceDocument.  # noqa: E501
        :type: int
        """

        self._entity_count = entity_count

    @property
    def external_ids(self):
        """Gets the external_ids of this SourceDocument.  # noqa: E501


        :return: The external_ids of this SourceDocument.  # noqa: E501
        :rtype: object
        """
        return self._external_ids

    @external_ids.setter
    def external_ids(self, external_ids):
        """Sets the external_ids of this SourceDocument.


        :param external_ids: The external_ids of this SourceDocument.  # noqa: E501
        :type: object
        """

        self._external_ids = external_ids

    @property
    def trial_data(self):
        """Gets the trial_data of this SourceDocument.  # noqa: E501


        :return: The trial_data of this SourceDocument.  # noqa: E501
        :rtype: object
        """
        return self._trial_data

    @trial_data.setter
    def trial_data(self, trial_data):
        """Sets the trial_data of this SourceDocument.


        :param trial_data: The trial_data of this SourceDocument.  # noqa: E501
        :type: object
        """

        self._trial_data = trial_data

    @property
    def file(self):
        """Gets the file of this SourceDocument.  # noqa: E501


        :return: The file of this SourceDocument.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this SourceDocument.


        :param file: The file of this SourceDocument.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def id(self):
        """Gets the id of this SourceDocument.  # noqa: E501


        :return: The id of this SourceDocument.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SourceDocument.


        :param id: The id of this SourceDocument.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def live_source(self):
        """Gets the live_source of this SourceDocument.  # noqa: E501


        :return: The live_source of this SourceDocument.  # noqa: E501
        :rtype: LiveSource
        """
        return self._live_source

    @live_source.setter
    def live_source(self, live_source):
        """Sets the live_source of this SourceDocument.


        :param live_source: The live_source of this SourceDocument.  # noqa: E501
        :type: LiveSource
        """

        self._live_source = live_source

    @property
    def metadata(self):
        """Gets the metadata of this SourceDocument.  # noqa: E501


        :return: The metadata of this SourceDocument.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SourceDocument.


        :param metadata: The metadata of this SourceDocument.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def mime_type(self):
        """Gets the mime_type of this SourceDocument.  # noqa: E501


        :return: The mime_type of this SourceDocument.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this SourceDocument.


        :param mime_type: The mime_type of this SourceDocument.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def name(self):
        """Gets the name of this SourceDocument.  # noqa: E501


        :return: The name of this SourceDocument.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SourceDocument.


        :param name: The name of this SourceDocument.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def object_key(self):
        """Gets the object_key of this SourceDocument.  # noqa: E501


        :return: The object_key of this SourceDocument.  # noqa: E501
        :rtype: str
        """
        return self._object_key

    @object_key.setter
    def object_key(self, object_key):
        """Sets the object_key of this SourceDocument.


        :param object_key: The object_key of this SourceDocument.  # noqa: E501
        :type: str
        """

        self._object_key = object_key

    @property
    def parent_source_document_id(self):
        """Gets the parent_source_document_id of this SourceDocument.  # noqa: E501


        :return: The parent_source_document_id of this SourceDocument.  # noqa: E501
        :rtype: str
        """
        return self._parent_source_document_id

    @parent_source_document_id.setter
    def parent_source_document_id(self, parent_source_document_id):
        """Sets the parent_source_document_id of this SourceDocument.


        :param parent_source_document_id: The parent_source_document_id of this SourceDocument.  # noqa: E501
        :type: str
        """

        self._parent_source_document_id = parent_source_document_id

    @property
    def project_computation_id(self):
        """Gets the project_computation_id of this SourceDocument.  # noqa: E501


        :return: The project_computation_id of this SourceDocument.  # noqa: E501
        :rtype: str
        """
        return self._project_computation_id

    @project_computation_id.setter
    def project_computation_id(self, project_computation_id):
        """Sets the project_computation_id of this SourceDocument.


        :param project_computation_id: The project_computation_id of this SourceDocument.  # noqa: E501
        :type: str
        """

        self._project_computation_id = project_computation_id

    @property
    def projects(self):
        """Gets the projects of this SourceDocument.  # noqa: E501


        :return: The projects of this SourceDocument.  # noqa: E501
        :rtype: list[str]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this SourceDocument.


        :param projects: The projects of this SourceDocument.  # noqa: E501
        :type: list[str]
        """

        self._projects = projects

    @property
    def raw_text(self):
        """Gets the raw_text of this SourceDocument.  # noqa: E501


        :return: The raw_text of this SourceDocument.  # noqa: E501
        :rtype: str
        """
        return self._raw_text

    @raw_text.setter
    def raw_text(self, raw_text):
        """Sets the raw_text of this SourceDocument.


        :param raw_text: The raw_text of this SourceDocument.  # noqa: E501
        :type: str
        """

        self._raw_text = raw_text

    @property
    def statement_count(self):
        """Gets the statement_count of this SourceDocument.  # noqa: E501


        :return: The statement_count of this SourceDocument.  # noqa: E501
        :rtype: int
        """
        return self._statement_count

    @statement_count.setter
    def statement_count(self, statement_count):
        """Sets the statement_count of this SourceDocument.


        :param statement_count: The statement_count of this SourceDocument.  # noqa: E501
        :type: int
        """

        self._statement_count = statement_count

    @property
    def suggested_category_id(self):
        """Gets the suggested_category_id of this SourceDocument.  # noqa: E501


        :return: The suggested_category_id of this SourceDocument.  # noqa: E501
        :rtype: str
        """
        return self._suggested_category_id

    @suggested_category_id.setter
    def suggested_category_id(self, suggested_category_id):
        """Sets the suggested_category_id of this SourceDocument.


        :param suggested_category_id: The suggested_category_id of this SourceDocument.  # noqa: E501
        :type: str
        """

        self._suggested_category_id = suggested_category_id

    @property
    def suggested_category_ids(self):
        """Gets the suggested_category_ids of this SourceDocument.  # noqa: E501


        :return: The suggested_category_ids of this SourceDocument.  # noqa: E501
        :rtype: list[str]
        """
        return self._suggested_category_ids

    @suggested_category_ids.setter
    def suggested_category_ids(self, suggested_category_ids):
        """Sets the suggested_category_ids of this SourceDocument.


        :param suggested_category_ids: The suggested_category_ids of this SourceDocument.  # noqa: E501
        :type: list[str]
        """

        self._suggested_category_ids = suggested_category_ids

    @property
    def suggested_category_rankings(self):
        """Gets the suggested_category_rankings of this SourceDocument.  # noqa: E501


        :return: The suggested_category_rankings of this SourceDocument.  # noqa: E501
        :rtype: object
        """
        return self._suggested_category_rankings

    @suggested_category_rankings.setter
    def suggested_category_rankings(self, suggested_category_rankings):
        """Sets the suggested_category_rankings of this SourceDocument.


        :param suggested_category_rankings: The suggested_category_rankings of this SourceDocument.  # noqa: E501
        :type: object
        """

        self._suggested_category_rankings = suggested_category_rankings

    @property
    def summary(self):
        """Gets the summary of this SourceDocument.  # noqa: E501


        :return: The summary of this SourceDocument.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this SourceDocument.


        :param summary: The summary of this SourceDocument.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def tabular_based_on_file_name(self):
        """Gets the tabular_based_on_file_name of this SourceDocument.  # noqa: E501


        :return: The tabular_based_on_file_name of this SourceDocument.  # noqa: E501
        :rtype: bool
        """
        return self._tabular_based_on_file_name

    @tabular_based_on_file_name.setter
    def tabular_based_on_file_name(self, tabular_based_on_file_name):
        """Sets the tabular_based_on_file_name of this SourceDocument.


        :param tabular_based_on_file_name: The tabular_based_on_file_name of this SourceDocument.  # noqa: E501
        :type: bool
        """

        self._tabular_based_on_file_name = tabular_based_on_file_name

    @property
    def url(self):
        """Gets the url of this SourceDocument.  # noqa: E501


        :return: The url of this SourceDocument.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SourceDocument.


        :param url: The url of this SourceDocument.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def has_vector(self):
        """Gets the has_vector of this SourceDocument.  # noqa: E501


        :return: The has_vector of this SourceDocument.  # noqa: E501
        :rtype: bool
        """
        return self._has_vector

    @has_vector.setter
    def has_vector(self, has_vector):
        """Sets the has_vector of this SourceDocument.


        :param has_vector: The has_vector of this SourceDocument.  # noqa: E501
        :type: bool
        """

        self._has_vector = has_vector

    @property
    def highlighted_text(self):
        """Gets the highlighted_text of this SourceDocument.  # noqa: E501


        :return: The highlighted_text of this SourceDocument.  # noqa: E501
        :rtype: list[str]
        """
        return self._highlighted_text

    @highlighted_text.setter
    def highlighted_text(self, highlighted_text):
        """Sets the highlighted_text of this SourceDocument.


        :param highlighted_text: The highlighted_text of this SourceDocument.  # noqa: E501
        :type: list[str]
        """

        self._highlighted_text = highlighted_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SourceDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SourceDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
