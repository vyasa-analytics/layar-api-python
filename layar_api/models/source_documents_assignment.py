# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: AI-Support@Certara.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SourceDocumentsAssignment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_document_search_command': 'SourceDocumentSearchCommand',
        'user_id': 'int',
        'list_id': 'str',
        'document_names': 'list[str]'
    }

    attribute_map = {
        'source_document_search_command': 'sourceDocumentSearchCommand',
        'user_id': 'userId',
        'list_id': 'listId',
        'document_names': 'documentNames'
    }

    def __init__(self, source_document_search_command=None, user_id=None, list_id=None, document_names=None):  # noqa: E501
        """SourceDocumentsAssignment - a model defined in Swagger"""  # noqa: E501
        self._source_document_search_command = None
        self._user_id = None
        self._list_id = None
        self._document_names = None
        self.discriminator = None
        if source_document_search_command is not None:
            self.source_document_search_command = source_document_search_command
        if user_id is not None:
            self.user_id = user_id
        if list_id is not None:
            self.list_id = list_id
        if document_names is not None:
            self.document_names = document_names

    @property
    def source_document_search_command(self):
        """Gets the source_document_search_command of this SourceDocumentsAssignment.  # noqa: E501


        :return: The source_document_search_command of this SourceDocumentsAssignment.  # noqa: E501
        :rtype: SourceDocumentSearchCommand
        """
        return self._source_document_search_command

    @source_document_search_command.setter
    def source_document_search_command(self, source_document_search_command):
        """Sets the source_document_search_command of this SourceDocumentsAssignment.


        :param source_document_search_command: The source_document_search_command of this SourceDocumentsAssignment.  # noqa: E501
        :type: SourceDocumentSearchCommand
        """

        self._source_document_search_command = source_document_search_command

    @property
    def user_id(self):
        """Gets the user_id of this SourceDocumentsAssignment.  # noqa: E501


        :return: The user_id of this SourceDocumentsAssignment.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SourceDocumentsAssignment.


        :param user_id: The user_id of this SourceDocumentsAssignment.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def list_id(self):
        """Gets the list_id of this SourceDocumentsAssignment.  # noqa: E501


        :return: The list_id of this SourceDocumentsAssignment.  # noqa: E501
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this SourceDocumentsAssignment.


        :param list_id: The list_id of this SourceDocumentsAssignment.  # noqa: E501
        :type: str
        """

        self._list_id = list_id

    @property
    def document_names(self):
        """Gets the document_names of this SourceDocumentsAssignment.  # noqa: E501


        :return: The document_names of this SourceDocumentsAssignment.  # noqa: E501
        :rtype: list[str]
        """
        return self._document_names

    @document_names.setter
    def document_names(self, document_names):
        """Sets the document_names of this SourceDocumentsAssignment.


        :param document_names: The document_names of this SourceDocumentsAssignment.  # noqa: E501
        :type: list[str]
        """

        self._document_names = document_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SourceDocumentsAssignment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SourceDocumentsAssignment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
