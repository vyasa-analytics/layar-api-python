# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: AI-Support@Certara.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Body3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    discriminator_value_class_map = {
            'AZURE'.lower(): 'AzureConnector',
            'DELL_ISILON'.lower(): 'IsilonConnector',
            'FILE_SYSTEM'.lower(): 'FileSystemConnector',
            'GBQ_PROJECT'.lower(): 'BQConnector',
            'GBQ_DATASET'.lower(): 'BQConnector',
            'GCS'.lower(): 'GCSConnector',
            'GOOGLE_DRIVE'.lower(): 'GoogleDriveConnector',
            'GFHIRS_PROJECT'.lower(): 'FHIRStoreConnector',
            'IRODS'.lower(): 'IRODSConnector',
            'JDBC_SNOWFLAKE'.lower(): 'SnowflakeConnector',
            'JDBC_SAP_HANA'.lower(): 'SAPHanaConnector',
            'JDBC_GENERIC'.lower(): 'SQLConnector',
            'NEO4J_CYPHER'.lower(): 'Neo4jConnector',
            'RSS'.lower(): 'RSSConnector',
            'S3'.lower(): 'S3Connector',
            'WEBSITE'.lower(): 'WebsiteConnector',
    }

    def __init__(self):  # noqa: E501
        """Body3 - a model defined in Swagger"""  # noqa: E501
        self.discriminator = 'live_source_type'

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
