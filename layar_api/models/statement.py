# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Statement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chem_ner_metadata': 'object',
        'column_keys': 'list[str]',
        'columns': 'object',
        'date_indexed': 'datetime',
        'detected_concepts': 'dict(str, list[str])',
        'detected_concepts_with_position': 'list[DetectedConcept]',
        'detected_types': 'list[str]',
        'document_id': 'str',
        'id': 'str',
        'named_entities': 'list[NamedEntity]',
        'noun_phrases_json_string': 'str',
        'pos_metadata_json_string': 'str',
        'raw_text': 'str',
        'similarity': 'float',
        'source': 'str',
        'start_offset': 'int',
        'tagged_concepts': 'list[TaggedConcept]',
        'tagged_relationships': 'list[TaggedRelationship]',
        'tweet': 'object',
        'type': 'str'
    }

    attribute_map = {
        'chem_ner_metadata': 'chemNerMetadata',
        'column_keys': 'columnKeys',
        'columns': 'columns',
        'date_indexed': 'dateIndexed',
        'detected_concepts': 'detectedConcepts',
        'detected_concepts_with_position': 'detectedConceptsWithPosition',
        'detected_types': 'detectedTypes',
        'document_id': 'documentId',
        'id': 'id',
        'named_entities': 'namedEntities',
        'noun_phrases_json_string': 'nounPhrasesJsonString',
        'pos_metadata_json_string': 'posMetadataJsonString',
        'raw_text': 'rawText',
        'similarity': 'similarity',
        'source': 'source',
        'start_offset': 'startOffset',
        'tagged_concepts': 'taggedConcepts',
        'tagged_relationships': 'taggedRelationships',
        'tweet': 'tweet',
        'type': 'type'
    }

    def __init__(self, chem_ner_metadata=None, column_keys=None, columns=None, date_indexed=None, detected_concepts=None, detected_concepts_with_position=None, detected_types=None, document_id=None, id=None, named_entities=None, noun_phrases_json_string=None, pos_metadata_json_string=None, raw_text=None, similarity=None, source=None, start_offset=None, tagged_concepts=None, tagged_relationships=None, tweet=None, type=None):  # noqa: E501
        """Statement - a model defined in Swagger"""  # noqa: E501
        self._chem_ner_metadata = None
        self._column_keys = None
        self._columns = None
        self._date_indexed = None
        self._detected_concepts = None
        self._detected_concepts_with_position = None
        self._detected_types = None
        self._document_id = None
        self._id = None
        self._named_entities = None
        self._noun_phrases_json_string = None
        self._pos_metadata_json_string = None
        self._raw_text = None
        self._similarity = None
        self._source = None
        self._start_offset = None
        self._tagged_concepts = None
        self._tagged_relationships = None
        self._tweet = None
        self._type = None
        self.discriminator = None
        if chem_ner_metadata is not None:
            self.chem_ner_metadata = chem_ner_metadata
        if column_keys is not None:
            self.column_keys = column_keys
        if columns is not None:
            self.columns = columns
        if date_indexed is not None:
            self.date_indexed = date_indexed
        if detected_concepts is not None:
            self.detected_concepts = detected_concepts
        if detected_concepts_with_position is not None:
            self.detected_concepts_with_position = detected_concepts_with_position
        if detected_types is not None:
            self.detected_types = detected_types
        if document_id is not None:
            self.document_id = document_id
        if id is not None:
            self.id = id
        if named_entities is not None:
            self.named_entities = named_entities
        if noun_phrases_json_string is not None:
            self.noun_phrases_json_string = noun_phrases_json_string
        if pos_metadata_json_string is not None:
            self.pos_metadata_json_string = pos_metadata_json_string
        if raw_text is not None:
            self.raw_text = raw_text
        if similarity is not None:
            self.similarity = similarity
        if source is not None:
            self.source = source
        if start_offset is not None:
            self.start_offset = start_offset
        if tagged_concepts is not None:
            self.tagged_concepts = tagged_concepts
        if tagged_relationships is not None:
            self.tagged_relationships = tagged_relationships
        if tweet is not None:
            self.tweet = tweet
        if type is not None:
            self.type = type

    @property
    def chem_ner_metadata(self):
        """Gets the chem_ner_metadata of this Statement.  # noqa: E501


        :return: The chem_ner_metadata of this Statement.  # noqa: E501
        :rtype: object
        """
        return self._chem_ner_metadata

    @chem_ner_metadata.setter
    def chem_ner_metadata(self, chem_ner_metadata):
        """Sets the chem_ner_metadata of this Statement.


        :param chem_ner_metadata: The chem_ner_metadata of this Statement.  # noqa: E501
        :type: object
        """

        self._chem_ner_metadata = chem_ner_metadata

    @property
    def column_keys(self):
        """Gets the column_keys of this Statement.  # noqa: E501


        :return: The column_keys of this Statement.  # noqa: E501
        :rtype: list[str]
        """
        return self._column_keys

    @column_keys.setter
    def column_keys(self, column_keys):
        """Sets the column_keys of this Statement.


        :param column_keys: The column_keys of this Statement.  # noqa: E501
        :type: list[str]
        """

        self._column_keys = column_keys

    @property
    def columns(self):
        """Gets the columns of this Statement.  # noqa: E501


        :return: The columns of this Statement.  # noqa: E501
        :rtype: object
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this Statement.


        :param columns: The columns of this Statement.  # noqa: E501
        :type: object
        """

        self._columns = columns

    @property
    def date_indexed(self):
        """Gets the date_indexed of this Statement.  # noqa: E501


        :return: The date_indexed of this Statement.  # noqa: E501
        :rtype: datetime
        """
        return self._date_indexed

    @date_indexed.setter
    def date_indexed(self, date_indexed):
        """Sets the date_indexed of this Statement.


        :param date_indexed: The date_indexed of this Statement.  # noqa: E501
        :type: datetime
        """

        self._date_indexed = date_indexed

    @property
    def detected_concepts(self):
        """Gets the detected_concepts of this Statement.  # noqa: E501


        :return: The detected_concepts of this Statement.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._detected_concepts

    @detected_concepts.setter
    def detected_concepts(self, detected_concepts):
        """Sets the detected_concepts of this Statement.


        :param detected_concepts: The detected_concepts of this Statement.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._detected_concepts = detected_concepts

    @property
    def detected_concepts_with_position(self):
        """Gets the detected_concepts_with_position of this Statement.  # noqa: E501


        :return: The detected_concepts_with_position of this Statement.  # noqa: E501
        :rtype: list[DetectedConcept]
        """
        return self._detected_concepts_with_position

    @detected_concepts_with_position.setter
    def detected_concepts_with_position(self, detected_concepts_with_position):
        """Sets the detected_concepts_with_position of this Statement.


        :param detected_concepts_with_position: The detected_concepts_with_position of this Statement.  # noqa: E501
        :type: list[DetectedConcept]
        """

        self._detected_concepts_with_position = detected_concepts_with_position

    @property
    def detected_types(self):
        """Gets the detected_types of this Statement.  # noqa: E501


        :return: The detected_types of this Statement.  # noqa: E501
        :rtype: list[str]
        """
        return self._detected_types

    @detected_types.setter
    def detected_types(self, detected_types):
        """Sets the detected_types of this Statement.


        :param detected_types: The detected_types of this Statement.  # noqa: E501
        :type: list[str]
        """

        self._detected_types = detected_types

    @property
    def document_id(self):
        """Gets the document_id of this Statement.  # noqa: E501


        :return: The document_id of this Statement.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this Statement.


        :param document_id: The document_id of this Statement.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def id(self):
        """Gets the id of this Statement.  # noqa: E501


        :return: The id of this Statement.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Statement.


        :param id: The id of this Statement.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def named_entities(self):
        """Gets the named_entities of this Statement.  # noqa: E501


        :return: The named_entities of this Statement.  # noqa: E501
        :rtype: list[NamedEntity]
        """
        return self._named_entities

    @named_entities.setter
    def named_entities(self, named_entities):
        """Sets the named_entities of this Statement.


        :param named_entities: The named_entities of this Statement.  # noqa: E501
        :type: list[NamedEntity]
        """

        self._named_entities = named_entities

    @property
    def noun_phrases_json_string(self):
        """Gets the noun_phrases_json_string of this Statement.  # noqa: E501


        :return: The noun_phrases_json_string of this Statement.  # noqa: E501
        :rtype: str
        """
        return self._noun_phrases_json_string

    @noun_phrases_json_string.setter
    def noun_phrases_json_string(self, noun_phrases_json_string):
        """Sets the noun_phrases_json_string of this Statement.


        :param noun_phrases_json_string: The noun_phrases_json_string of this Statement.  # noqa: E501
        :type: str
        """

        self._noun_phrases_json_string = noun_phrases_json_string

    @property
    def pos_metadata_json_string(self):
        """Gets the pos_metadata_json_string of this Statement.  # noqa: E501


        :return: The pos_metadata_json_string of this Statement.  # noqa: E501
        :rtype: str
        """
        return self._pos_metadata_json_string

    @pos_metadata_json_string.setter
    def pos_metadata_json_string(self, pos_metadata_json_string):
        """Sets the pos_metadata_json_string of this Statement.


        :param pos_metadata_json_string: The pos_metadata_json_string of this Statement.  # noqa: E501
        :type: str
        """

        self._pos_metadata_json_string = pos_metadata_json_string

    @property
    def raw_text(self):
        """Gets the raw_text of this Statement.  # noqa: E501


        :return: The raw_text of this Statement.  # noqa: E501
        :rtype: str
        """
        return self._raw_text

    @raw_text.setter
    def raw_text(self, raw_text):
        """Sets the raw_text of this Statement.


        :param raw_text: The raw_text of this Statement.  # noqa: E501
        :type: str
        """

        self._raw_text = raw_text

    @property
    def similarity(self):
        """Gets the similarity of this Statement.  # noqa: E501


        :return: The similarity of this Statement.  # noqa: E501
        :rtype: float
        """
        return self._similarity

    @similarity.setter
    def similarity(self, similarity):
        """Sets the similarity of this Statement.


        :param similarity: The similarity of this Statement.  # noqa: E501
        :type: float
        """

        self._similarity = similarity

    @property
    def source(self):
        """Gets the source of this Statement.  # noqa: E501


        :return: The source of this Statement.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Statement.


        :param source: The source of this Statement.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def start_offset(self):
        """Gets the start_offset of this Statement.  # noqa: E501


        :return: The start_offset of this Statement.  # noqa: E501
        :rtype: int
        """
        return self._start_offset

    @start_offset.setter
    def start_offset(self, start_offset):
        """Sets the start_offset of this Statement.


        :param start_offset: The start_offset of this Statement.  # noqa: E501
        :type: int
        """

        self._start_offset = start_offset

    @property
    def tagged_concepts(self):
        """Gets the tagged_concepts of this Statement.  # noqa: E501


        :return: The tagged_concepts of this Statement.  # noqa: E501
        :rtype: list[TaggedConcept]
        """
        return self._tagged_concepts

    @tagged_concepts.setter
    def tagged_concepts(self, tagged_concepts):
        """Sets the tagged_concepts of this Statement.


        :param tagged_concepts: The tagged_concepts of this Statement.  # noqa: E501
        :type: list[TaggedConcept]
        """

        self._tagged_concepts = tagged_concepts

    @property
    def tagged_relationships(self):
        """Gets the tagged_relationships of this Statement.  # noqa: E501


        :return: The tagged_relationships of this Statement.  # noqa: E501
        :rtype: list[TaggedRelationship]
        """
        return self._tagged_relationships

    @tagged_relationships.setter
    def tagged_relationships(self, tagged_relationships):
        """Sets the tagged_relationships of this Statement.


        :param tagged_relationships: The tagged_relationships of this Statement.  # noqa: E501
        :type: list[TaggedRelationship]
        """

        self._tagged_relationships = tagged_relationships

    @property
    def tweet(self):
        """Gets the tweet of this Statement.  # noqa: E501


        :return: The tweet of this Statement.  # noqa: E501
        :rtype: object
        """
        return self._tweet

    @tweet.setter
    def tweet(self, tweet):
        """Sets the tweet of this Statement.


        :param tweet: The tweet of this Statement.  # noqa: E501
        :type: object
        """

        self._tweet = tweet

    @property
    def type(self):
        """Gets the type of this Statement.  # noqa: E501


        :return: The type of this Statement.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Statement.


        :param type: The type of this Statement.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Statement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Statement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
