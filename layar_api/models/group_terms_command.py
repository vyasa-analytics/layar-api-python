# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: AI-Support@Certara.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GroupTermsCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'terms': 'list[str]',
        'grouping_method': 'str',
        'grouping_params': 'LayargrouptermsGroupingParams'
    }

    attribute_map = {
        'terms': 'terms',
        'grouping_method': 'grouping_method',
        'grouping_params': 'grouping_params'
    }

    def __init__(self, terms=None, grouping_method=None, grouping_params=None):  # noqa: E501
        """GroupTermsCommand - a model defined in Swagger"""  # noqa: E501
        self._terms = None
        self._grouping_method = None
        self._grouping_params = None
        self.discriminator = None
        if terms is not None:
            self.terms = terms
        if grouping_method is not None:
            self.grouping_method = grouping_method
        if grouping_params is not None:
            self.grouping_params = grouping_params

    @property
    def terms(self):
        """Gets the terms of this GroupTermsCommand.  # noqa: E501

        A list of terms to be grouped  # noqa: E501

        :return: The terms of this GroupTermsCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this GroupTermsCommand.

        A list of terms to be grouped  # noqa: E501

        :param terms: The terms of this GroupTermsCommand.  # noqa: E501
        :type: list[str]
        """

        self._terms = terms

    @property
    def grouping_method(self):
        """Gets the grouping_method of this GroupTermsCommand.  # noqa: E501


        :return: The grouping_method of this GroupTermsCommand.  # noqa: E501
        :rtype: str
        """
        return self._grouping_method

    @grouping_method.setter
    def grouping_method(self, grouping_method):
        """Sets the grouping_method of this GroupTermsCommand.


        :param grouping_method: The grouping_method of this GroupTermsCommand.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLOSE_MATCHES_JARO", "CLOSE_MATCHES_COSINE", "CLOSE_MATCHES_LEV", "COLUMN_SIMILARITY", "TOKEN_RATIO"]  # noqa: E501
        if grouping_method not in allowed_values:
            raise ValueError(
                "Invalid value for `grouping_method` ({0}), must be one of {1}"  # noqa: E501
                .format(grouping_method, allowed_values)
            )

        self._grouping_method = grouping_method

    @property
    def grouping_params(self):
        """Gets the grouping_params of this GroupTermsCommand.  # noqa: E501


        :return: The grouping_params of this GroupTermsCommand.  # noqa: E501
        :rtype: LayargrouptermsGroupingParams
        """
        return self._grouping_params

    @grouping_params.setter
    def grouping_params(self, grouping_params):
        """Sets the grouping_params of this GroupTermsCommand.


        :param grouping_params: The grouping_params of this GroupTermsCommand.  # noqa: E501
        :type: LayargrouptermsGroupingParams
        """

        self._grouping_params = grouping_params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupTermsCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupTermsCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
