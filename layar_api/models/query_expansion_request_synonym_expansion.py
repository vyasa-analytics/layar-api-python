# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: support@vyasa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QueryExpansionRequestSynonymExpansion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wordvector': 'bool',
        'ontology': 'list[str]'
    }

    attribute_map = {
        'wordvector': 'wordvector',
        'ontology': 'ontology'
    }

    def __init__(self, wordvector=None, ontology=None):  # noqa: E501
        """QueryExpansionRequestSynonymExpansion - a model defined in Swagger"""  # noqa: E501
        self._wordvector = None
        self._ontology = None
        self.discriminator = None
        if wordvector is not None:
            self.wordvector = wordvector
        if ontology is not None:
            self.ontology = ontology

    @property
    def wordvector(self):
        """Gets the wordvector of this QueryExpansionRequestSynonymExpansion.  # noqa: E501


        :return: The wordvector of this QueryExpansionRequestSynonymExpansion.  # noqa: E501
        :rtype: bool
        """
        return self._wordvector

    @wordvector.setter
    def wordvector(self, wordvector):
        """Sets the wordvector of this QueryExpansionRequestSynonymExpansion.


        :param wordvector: The wordvector of this QueryExpansionRequestSynonymExpansion.  # noqa: E501
        :type: bool
        """

        self._wordvector = wordvector

    @property
    def ontology(self):
        """Gets the ontology of this QueryExpansionRequestSynonymExpansion.  # noqa: E501


        :return: The ontology of this QueryExpansionRequestSynonymExpansion.  # noqa: E501
        :rtype: list[str]
        """
        return self._ontology

    @ontology.setter
    def ontology(self, ontology):
        """Sets the ontology of this QueryExpansionRequestSynonymExpansion.


        :param ontology: The ontology of this QueryExpansionRequestSynonymExpansion.  # noqa: E501
        :type: list[str]
        """

        self._ontology = ontology

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueryExpansionRequestSynonymExpansion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryExpansionRequestSynonymExpansion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
