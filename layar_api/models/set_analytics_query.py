# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SetAnalyticsQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'children': 'list[SetAnalyticsQuery]',
        'cluster_id': 'str',
        'clustered_query_id': 'str',
        'clustered_statements': 'ClusteredStatements',
        'concept_filter_type': 'str',
        'concept_ids': 'list[str]',
        'concept_query': 'str',
        'concept_type_ids': 'list[str]',
        'cross_queries': 'list[CrossQuery]',
        'from_statements': 'bool',
        'id': 'str',
        'node_to_search': 'object',
        'params': 'ConceptQueryParams',
        'parent': 'SetAnalyticsQuery',
        'parent_child_relationship_type': 'str',
        'parent_child_result_type': 'str',
        'query': 'str',
        'relationships_to_parent': 'list[str]',
        'similar_statement_ids': 'list[str]',
        'saved_list_id': 'str',
        'statement_similarity_id': 'str',
        'to_search': 'bool'
    }

    attribute_map = {
        'children': 'children',
        'cluster_id': 'clusterId',
        'clustered_query_id': 'clusteredQueryId',
        'clustered_statements': 'clusteredStatements',
        'concept_filter_type': 'conceptFilterType',
        'concept_ids': 'conceptIds',
        'concept_query': 'conceptQuery',
        'concept_type_ids': 'conceptTypeIds',
        'cross_queries': 'crossQueries',
        'from_statements': 'fromStatements',
        'id': 'id',
        'node_to_search': 'nodeToSearch',
        'params': 'params',
        'parent': 'parent',
        'parent_child_relationship_type': 'parentChildRelationshipType',
        'parent_child_result_type': 'parentChildResultType',
        'query': 'query',
        'relationships_to_parent': 'relationshipsToParent',
        'similar_statement_ids': 'similarStatementIds',
        'saved_list_id': 'savedListId',
        'statement_similarity_id': 'statementSimilarityId',
        'to_search': 'toSearch'
    }

    def __init__(self, children=None, cluster_id=None, clustered_query_id=None, clustered_statements=None, concept_filter_type=None, concept_ids=None, concept_query=None, concept_type_ids=None, cross_queries=None, from_statements=None, id=None, node_to_search=None, params=None, parent=None, parent_child_relationship_type=None, parent_child_result_type=None, query=None, relationships_to_parent=None, similar_statement_ids=None, saved_list_id=None, statement_similarity_id=None, to_search=None):  # noqa: E501
        """SetAnalyticsQuery - a model defined in Swagger"""  # noqa: E501
        self._children = None
        self._cluster_id = None
        self._clustered_query_id = None
        self._clustered_statements = None
        self._concept_filter_type = None
        self._concept_ids = None
        self._concept_query = None
        self._concept_type_ids = None
        self._cross_queries = None
        self._from_statements = None
        self._id = None
        self._node_to_search = None
        self._params = None
        self._parent = None
        self._parent_child_relationship_type = None
        self._parent_child_result_type = None
        self._query = None
        self._relationships_to_parent = None
        self._similar_statement_ids = None
        self._saved_list_id = None
        self._statement_similarity_id = None
        self._to_search = None
        self.discriminator = None
        if children is not None:
            self.children = children
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if clustered_query_id is not None:
            self.clustered_query_id = clustered_query_id
        if clustered_statements is not None:
            self.clustered_statements = clustered_statements
        if concept_filter_type is not None:
            self.concept_filter_type = concept_filter_type
        if concept_ids is not None:
            self.concept_ids = concept_ids
        if concept_query is not None:
            self.concept_query = concept_query
        if concept_type_ids is not None:
            self.concept_type_ids = concept_type_ids
        if cross_queries is not None:
            self.cross_queries = cross_queries
        if from_statements is not None:
            self.from_statements = from_statements
        if id is not None:
            self.id = id
        if node_to_search is not None:
            self.node_to_search = node_to_search
        if params is not None:
            self.params = params
        if parent is not None:
            self.parent = parent
        if parent_child_relationship_type is not None:
            self.parent_child_relationship_type = parent_child_relationship_type
        if parent_child_result_type is not None:
            self.parent_child_result_type = parent_child_result_type
        if query is not None:
            self.query = query
        if relationships_to_parent is not None:
            self.relationships_to_parent = relationships_to_parent
        if similar_statement_ids is not None:
            self.similar_statement_ids = similar_statement_ids
        if saved_list_id is not None:
            self.saved_list_id = saved_list_id
        if statement_similarity_id is not None:
            self.statement_similarity_id = statement_similarity_id
        if to_search is not None:
            self.to_search = to_search

    @property
    def children(self):
        """Gets the children of this SetAnalyticsQuery.  # noqa: E501


        :return: The children of this SetAnalyticsQuery.  # noqa: E501
        :rtype: list[SetAnalyticsQuery]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this SetAnalyticsQuery.


        :param children: The children of this SetAnalyticsQuery.  # noqa: E501
        :type: list[SetAnalyticsQuery]
        """

        self._children = children

    @property
    def cluster_id(self):
        """Gets the cluster_id of this SetAnalyticsQuery.  # noqa: E501


        :return: The cluster_id of this SetAnalyticsQuery.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this SetAnalyticsQuery.


        :param cluster_id: The cluster_id of this SetAnalyticsQuery.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def clustered_query_id(self):
        """Gets the clustered_query_id of this SetAnalyticsQuery.  # noqa: E501


        :return: The clustered_query_id of this SetAnalyticsQuery.  # noqa: E501
        :rtype: str
        """
        return self._clustered_query_id

    @clustered_query_id.setter
    def clustered_query_id(self, clustered_query_id):
        """Sets the clustered_query_id of this SetAnalyticsQuery.


        :param clustered_query_id: The clustered_query_id of this SetAnalyticsQuery.  # noqa: E501
        :type: str
        """

        self._clustered_query_id = clustered_query_id

    @property
    def clustered_statements(self):
        """Gets the clustered_statements of this SetAnalyticsQuery.  # noqa: E501


        :return: The clustered_statements of this SetAnalyticsQuery.  # noqa: E501
        :rtype: ClusteredStatements
        """
        return self._clustered_statements

    @clustered_statements.setter
    def clustered_statements(self, clustered_statements):
        """Sets the clustered_statements of this SetAnalyticsQuery.


        :param clustered_statements: The clustered_statements of this SetAnalyticsQuery.  # noqa: E501
        :type: ClusteredStatements
        """

        self._clustered_statements = clustered_statements

    @property
    def concept_filter_type(self):
        """Gets the concept_filter_type of this SetAnalyticsQuery.  # noqa: E501


        :return: The concept_filter_type of this SetAnalyticsQuery.  # noqa: E501
        :rtype: str
        """
        return self._concept_filter_type

    @concept_filter_type.setter
    def concept_filter_type(self, concept_filter_type):
        """Sets the concept_filter_type of this SetAnalyticsQuery.


        :param concept_filter_type: The concept_filter_type of this SetAnalyticsQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "NOVEL", "VERIFIED"]  # noqa: E501
        if concept_filter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `concept_filter_type` ({0}), must be one of {1}"  # noqa: E501
                .format(concept_filter_type, allowed_values)
            )

        self._concept_filter_type = concept_filter_type

    @property
    def concept_ids(self):
        """Gets the concept_ids of this SetAnalyticsQuery.  # noqa: E501


        :return: The concept_ids of this SetAnalyticsQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._concept_ids

    @concept_ids.setter
    def concept_ids(self, concept_ids):
        """Sets the concept_ids of this SetAnalyticsQuery.


        :param concept_ids: The concept_ids of this SetAnalyticsQuery.  # noqa: E501
        :type: list[str]
        """

        self._concept_ids = concept_ids

    @property
    def concept_query(self):
        """Gets the concept_query of this SetAnalyticsQuery.  # noqa: E501


        :return: The concept_query of this SetAnalyticsQuery.  # noqa: E501
        :rtype: str
        """
        return self._concept_query

    @concept_query.setter
    def concept_query(self, concept_query):
        """Sets the concept_query of this SetAnalyticsQuery.


        :param concept_query: The concept_query of this SetAnalyticsQuery.  # noqa: E501
        :type: str
        """

        self._concept_query = concept_query

    @property
    def concept_type_ids(self):
        """Gets the concept_type_ids of this SetAnalyticsQuery.  # noqa: E501


        :return: The concept_type_ids of this SetAnalyticsQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._concept_type_ids

    @concept_type_ids.setter
    def concept_type_ids(self, concept_type_ids):
        """Sets the concept_type_ids of this SetAnalyticsQuery.


        :param concept_type_ids: The concept_type_ids of this SetAnalyticsQuery.  # noqa: E501
        :type: list[str]
        """

        self._concept_type_ids = concept_type_ids

    @property
    def cross_queries(self):
        """Gets the cross_queries of this SetAnalyticsQuery.  # noqa: E501


        :return: The cross_queries of this SetAnalyticsQuery.  # noqa: E501
        :rtype: list[CrossQuery]
        """
        return self._cross_queries

    @cross_queries.setter
    def cross_queries(self, cross_queries):
        """Sets the cross_queries of this SetAnalyticsQuery.


        :param cross_queries: The cross_queries of this SetAnalyticsQuery.  # noqa: E501
        :type: list[CrossQuery]
        """

        self._cross_queries = cross_queries

    @property
    def from_statements(self):
        """Gets the from_statements of this SetAnalyticsQuery.  # noqa: E501


        :return: The from_statements of this SetAnalyticsQuery.  # noqa: E501
        :rtype: bool
        """
        return self._from_statements

    @from_statements.setter
    def from_statements(self, from_statements):
        """Sets the from_statements of this SetAnalyticsQuery.


        :param from_statements: The from_statements of this SetAnalyticsQuery.  # noqa: E501
        :type: bool
        """

        self._from_statements = from_statements

    @property
    def id(self):
        """Gets the id of this SetAnalyticsQuery.  # noqa: E501


        :return: The id of this SetAnalyticsQuery.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SetAnalyticsQuery.


        :param id: The id of this SetAnalyticsQuery.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def node_to_search(self):
        """Gets the node_to_search of this SetAnalyticsQuery.  # noqa: E501


        :return: The node_to_search of this SetAnalyticsQuery.  # noqa: E501
        :rtype: object
        """
        return self._node_to_search

    @node_to_search.setter
    def node_to_search(self, node_to_search):
        """Sets the node_to_search of this SetAnalyticsQuery.


        :param node_to_search: The node_to_search of this SetAnalyticsQuery.  # noqa: E501
        :type: object
        """

        self._node_to_search = node_to_search

    @property
    def params(self):
        """Gets the params of this SetAnalyticsQuery.  # noqa: E501


        :return: The params of this SetAnalyticsQuery.  # noqa: E501
        :rtype: ConceptQueryParams
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this SetAnalyticsQuery.


        :param params: The params of this SetAnalyticsQuery.  # noqa: E501
        :type: ConceptQueryParams
        """

        self._params = params

    @property
    def parent(self):
        """Gets the parent of this SetAnalyticsQuery.  # noqa: E501


        :return: The parent of this SetAnalyticsQuery.  # noqa: E501
        :rtype: SetAnalyticsQuery
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this SetAnalyticsQuery.


        :param parent: The parent of this SetAnalyticsQuery.  # noqa: E501
        :type: SetAnalyticsQuery
        """

        self._parent = parent

    @property
    def parent_child_relationship_type(self):
        """Gets the parent_child_relationship_type of this SetAnalyticsQuery.  # noqa: E501


        :return: The parent_child_relationship_type of this SetAnalyticsQuery.  # noqa: E501
        :rtype: str
        """
        return self._parent_child_relationship_type

    @parent_child_relationship_type.setter
    def parent_child_relationship_type(self, parent_child_relationship_type):
        """Sets the parent_child_relationship_type of this SetAnalyticsQuery.


        :param parent_child_relationship_type: The parent_child_relationship_type of this SetAnalyticsQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["RELATIONSHIP", "FILTER"]  # noqa: E501
        if parent_child_relationship_type not in allowed_values:
            raise ValueError(
                "Invalid value for `parent_child_relationship_type` ({0}), must be one of {1}"  # noqa: E501
                .format(parent_child_relationship_type, allowed_values)
            )

        self._parent_child_relationship_type = parent_child_relationship_type

    @property
    def parent_child_result_type(self):
        """Gets the parent_child_result_type of this SetAnalyticsQuery.  # noqa: E501


        :return: The parent_child_result_type of this SetAnalyticsQuery.  # noqa: E501
        :rtype: str
        """
        return self._parent_child_result_type

    @parent_child_result_type.setter
    def parent_child_result_type(self, parent_child_result_type):
        """Sets the parent_child_result_type of this SetAnalyticsQuery.


        :param parent_child_result_type: The parent_child_result_type of this SetAnalyticsQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNFILTERED", "FILTERED"]  # noqa: E501
        if parent_child_result_type not in allowed_values:
            raise ValueError(
                "Invalid value for `parent_child_result_type` ({0}), must be one of {1}"  # noqa: E501
                .format(parent_child_result_type, allowed_values)
            )

        self._parent_child_result_type = parent_child_result_type

    @property
    def query(self):
        """Gets the query of this SetAnalyticsQuery.  # noqa: E501


        :return: The query of this SetAnalyticsQuery.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SetAnalyticsQuery.


        :param query: The query of this SetAnalyticsQuery.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def relationships_to_parent(self):
        """Gets the relationships_to_parent of this SetAnalyticsQuery.  # noqa: E501


        :return: The relationships_to_parent of this SetAnalyticsQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._relationships_to_parent

    @relationships_to_parent.setter
    def relationships_to_parent(self, relationships_to_parent):
        """Sets the relationships_to_parent of this SetAnalyticsQuery.


        :param relationships_to_parent: The relationships_to_parent of this SetAnalyticsQuery.  # noqa: E501
        :type: list[str]
        """

        self._relationships_to_parent = relationships_to_parent

    @property
    def similar_statement_ids(self):
        """Gets the similar_statement_ids of this SetAnalyticsQuery.  # noqa: E501


        :return: The similar_statement_ids of this SetAnalyticsQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._similar_statement_ids

    @similar_statement_ids.setter
    def similar_statement_ids(self, similar_statement_ids):
        """Sets the similar_statement_ids of this SetAnalyticsQuery.


        :param similar_statement_ids: The similar_statement_ids of this SetAnalyticsQuery.  # noqa: E501
        :type: list[str]
        """

        self._similar_statement_ids = similar_statement_ids

    @property
    def saved_list_id(self):
        """Gets the saved_list_id of this SetAnalyticsQuery.  # noqa: E501


        :return: The saved_list_id of this SetAnalyticsQuery.  # noqa: E501
        :rtype: str
        """
        return self._saved_list_id

    @saved_list_id.setter
    def saved_list_id(self, saved_list_id):
        """Sets the saved_list_id of this SetAnalyticsQuery.


        :param saved_list_id: The saved_list_id of this SetAnalyticsQuery.  # noqa: E501
        :type: str
        """

        self._saved_list_id = saved_list_id

    @property
    def statement_similarity_id(self):
        """Gets the statement_similarity_id of this SetAnalyticsQuery.  # noqa: E501


        :return: The statement_similarity_id of this SetAnalyticsQuery.  # noqa: E501
        :rtype: str
        """
        return self._statement_similarity_id

    @statement_similarity_id.setter
    def statement_similarity_id(self, statement_similarity_id):
        """Sets the statement_similarity_id of this SetAnalyticsQuery.


        :param statement_similarity_id: The statement_similarity_id of this SetAnalyticsQuery.  # noqa: E501
        :type: str
        """

        self._statement_similarity_id = statement_similarity_id

    @property
    def to_search(self):
        """Gets the to_search of this SetAnalyticsQuery.  # noqa: E501


        :return: The to_search of this SetAnalyticsQuery.  # noqa: E501
        :rtype: bool
        """
        return self._to_search

    @to_search.setter
    def to_search(self, to_search):
        """Sets the to_search of this SetAnalyticsQuery.


        :param to_search: The to_search of this SetAnalyticsQuery.  # noqa: E501
        :type: bool
        """

        self._to_search = to_search

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetAnalyticsQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetAnalyticsQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
