# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: AI-Support@Certara.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BulkQuestion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'concept_types': 'list[str]',
        'question_key': 'str',
        'question_string_variations': 'list[str]'
    }

    attribute_map = {
        'concept_types': 'conceptTypes',
        'question_key': 'questionKey',
        'question_string_variations': 'questionStringVariations'
    }

    def __init__(self, concept_types=None, question_key=None, question_string_variations=None):  # noqa: E501
        """BulkQuestion - a model defined in Swagger"""  # noqa: E501
        self._concept_types = None
        self._question_key = None
        self._question_string_variations = None
        self.discriminator = None
        if concept_types is not None:
            self.concept_types = concept_types
        if question_key is not None:
            self.question_key = question_key
        if question_string_variations is not None:
            self.question_string_variations = question_string_variations

    @property
    def concept_types(self):
        """Gets the concept_types of this BulkQuestion.  # noqa: E501

        A list of concept type IDs  # noqa: E501

        :return: The concept_types of this BulkQuestion.  # noqa: E501
        :rtype: list[str]
        """
        return self._concept_types

    @concept_types.setter
    def concept_types(self, concept_types):
        """Sets the concept_types of this BulkQuestion.

        A list of concept type IDs  # noqa: E501

        :param concept_types: The concept_types of this BulkQuestion.  # noqa: E501
        :type: list[str]
        """

        self._concept_types = concept_types

    @property
    def question_key(self):
        """Gets the question_key of this BulkQuestion.  # noqa: E501

        The main question to run  # noqa: E501

        :return: The question_key of this BulkQuestion.  # noqa: E501
        :rtype: str
        """
        return self._question_key

    @question_key.setter
    def question_key(self, question_key):
        """Sets the question_key of this BulkQuestion.

        The main question to run  # noqa: E501

        :param question_key: The question_key of this BulkQuestion.  # noqa: E501
        :type: str
        """

        self._question_key = question_key

    @property
    def question_string_variations(self):
        """Gets the question_string_variations of this BulkQuestion.  # noqa: E501

        A list of variations in the phrasing of the question to ensure accurate results  # noqa: E501

        :return: The question_string_variations of this BulkQuestion.  # noqa: E501
        :rtype: list[str]
        """
        return self._question_string_variations

    @question_string_variations.setter
    def question_string_variations(self, question_string_variations):
        """Sets the question_string_variations of this BulkQuestion.

        A list of variations in the phrasing of the question to ensure accurate results  # noqa: E501

        :param question_string_variations: The question_string_variations of this BulkQuestion.  # noqa: E501
        :type: list[str]
        """

        self._question_string_variations = question_string_variations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkQuestion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkQuestion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
