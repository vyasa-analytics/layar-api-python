# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: support@vyasa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CrossQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'query': 'str',
        'name': 'str',
        'concept_type_id': 'str',
        'document_id': 'str',
        'column_key': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'query': 'query',
        'name': 'name',
        'concept_type_id': 'conceptTypeId',
        'document_id': 'documentId',
        'column_key': 'columnKey'
    }

    def __init__(self, id=None, type=None, query=None, name=None, concept_type_id=None, document_id=None, column_key=None):  # noqa: E501
        """CrossQuery - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._query = None
        self._name = None
        self._concept_type_id = None
        self._document_id = None
        self._column_key = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if query is not None:
            self.query = query
        if name is not None:
            self.name = name
        if concept_type_id is not None:
            self.concept_type_id = concept_type_id
        if document_id is not None:
            self.document_id = document_id
        if column_key is not None:
            self.column_key = column_key

    @property
    def id(self):
        """Gets the id of this CrossQuery.  # noqa: E501


        :return: The id of this CrossQuery.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CrossQuery.


        :param id: The id of this CrossQuery.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this CrossQuery.  # noqa: E501


        :return: The type of this CrossQuery.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CrossQuery.


        :param type: The type of this CrossQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["TERMS", "CONCEPTS", "STRUCTURED_DATA"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def query(self):
        """Gets the query of this CrossQuery.  # noqa: E501


        :return: The query of this CrossQuery.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this CrossQuery.


        :param query: The query of this CrossQuery.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def name(self):
        """Gets the name of this CrossQuery.  # noqa: E501


        :return: The name of this CrossQuery.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CrossQuery.


        :param name: The name of this CrossQuery.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def concept_type_id(self):
        """Gets the concept_type_id of this CrossQuery.  # noqa: E501


        :return: The concept_type_id of this CrossQuery.  # noqa: E501
        :rtype: str
        """
        return self._concept_type_id

    @concept_type_id.setter
    def concept_type_id(self, concept_type_id):
        """Sets the concept_type_id of this CrossQuery.


        :param concept_type_id: The concept_type_id of this CrossQuery.  # noqa: E501
        :type: str
        """

        self._concept_type_id = concept_type_id

    @property
    def document_id(self):
        """Gets the document_id of this CrossQuery.  # noqa: E501


        :return: The document_id of this CrossQuery.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this CrossQuery.


        :param document_id: The document_id of this CrossQuery.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def column_key(self):
        """Gets the column_key of this CrossQuery.  # noqa: E501


        :return: The column_key of this CrossQuery.  # noqa: E501
        :rtype: str
        """
        return self._column_key

    @column_key.setter
    def column_key(self, column_key):
        """Sets the column_key of this CrossQuery.


        :param column_key: The column_key of this CrossQuery.  # noqa: E501
        :type: str
        """

        self._column_key = column_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CrossQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrossQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
