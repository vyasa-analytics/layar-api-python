# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from layar_api.models.domain_object import DomainObject  # noqa: F401,E501

class OntologyTerm(DomainObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attributes': 'object',
        'db_alt_ids': 'list[str]',
        'db_id': 'str',
        'document_id': 'str',
        'id_path': 'str',
        'name_path': 'str',
        'namespace': 'str',
        'obsolete': 'bool',
        'sem_type_id_path': 'str',
        'sem_type_name_path': 'str',
        'synonyms': 'list[str]',
        'xrefs': 'list[str]'
    }
    if hasattr(DomainObject, "swagger_types"):
        swagger_types.update(DomainObject.swagger_types)

    attribute_map = {
        'attributes': 'attributes',
        'db_alt_ids': 'dbAltIds',
        'db_id': 'dbId',
        'document_id': 'documentId',
        'id_path': 'idPath',
        'name_path': 'namePath',
        'namespace': 'namespace',
        'obsolete': 'obsolete',
        'sem_type_id_path': 'semTypeIdPath',
        'sem_type_name_path': 'semTypeNamePath',
        'synonyms': 'synonyms',
        'xrefs': 'xrefs'
    }
    if hasattr(DomainObject, "attribute_map"):
        attribute_map.update(DomainObject.attribute_map)

    def __init__(self, attributes=None, db_alt_ids=None, db_id=None, document_id=None, id_path=None, name_path=None, namespace=None, obsolete=None, sem_type_id_path=None, sem_type_name_path=None, synonyms=None, xrefs=None, *args, **kwargs):  # noqa: E501
        """OntologyTerm - a model defined in Swagger"""  # noqa: E501
        self._attributes = None
        self._db_alt_ids = None
        self._db_id = None
        self._document_id = None
        self._id_path = None
        self._name_path = None
        self._namespace = None
        self._obsolete = None
        self._sem_type_id_path = None
        self._sem_type_name_path = None
        self._synonyms = None
        self._xrefs = None
        self.discriminator = None
        if attributes is not None:
            self.attributes = attributes
        if db_alt_ids is not None:
            self.db_alt_ids = db_alt_ids
        if db_id is not None:
            self.db_id = db_id
        if document_id is not None:
            self.document_id = document_id
        if id_path is not None:
            self.id_path = id_path
        if name_path is not None:
            self.name_path = name_path
        if namespace is not None:
            self.namespace = namespace
        if obsolete is not None:
            self.obsolete = obsolete
        if sem_type_id_path is not None:
            self.sem_type_id_path = sem_type_id_path
        if sem_type_name_path is not None:
            self.sem_type_name_path = sem_type_name_path
        if synonyms is not None:
            self.synonyms = synonyms
        if xrefs is not None:
            self.xrefs = xrefs
        DomainObject.__init__(self, *args, **kwargs)

    @property
    def attributes(self):
        """Gets the attributes of this OntologyTerm.  # noqa: E501


        :return: The attributes of this OntologyTerm.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this OntologyTerm.


        :param attributes: The attributes of this OntologyTerm.  # noqa: E501
        :type: object
        """

        self._attributes = attributes

    @property
    def db_alt_ids(self):
        """Gets the db_alt_ids of this OntologyTerm.  # noqa: E501


        :return: The db_alt_ids of this OntologyTerm.  # noqa: E501
        :rtype: list[str]
        """
        return self._db_alt_ids

    @db_alt_ids.setter
    def db_alt_ids(self, db_alt_ids):
        """Sets the db_alt_ids of this OntologyTerm.


        :param db_alt_ids: The db_alt_ids of this OntologyTerm.  # noqa: E501
        :type: list[str]
        """

        self._db_alt_ids = db_alt_ids

    @property
    def db_id(self):
        """Gets the db_id of this OntologyTerm.  # noqa: E501


        :return: The db_id of this OntologyTerm.  # noqa: E501
        :rtype: str
        """
        return self._db_id

    @db_id.setter
    def db_id(self, db_id):
        """Sets the db_id of this OntologyTerm.


        :param db_id: The db_id of this OntologyTerm.  # noqa: E501
        :type: str
        """

        self._db_id = db_id

    @property
    def document_id(self):
        """Gets the document_id of this OntologyTerm.  # noqa: E501


        :return: The document_id of this OntologyTerm.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this OntologyTerm.


        :param document_id: The document_id of this OntologyTerm.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def id_path(self):
        """Gets the id_path of this OntologyTerm.  # noqa: E501

        slash-separated list of the ID path hierarchy  # noqa: E501

        :return: The id_path of this OntologyTerm.  # noqa: E501
        :rtype: str
        """
        return self._id_path

    @id_path.setter
    def id_path(self, id_path):
        """Sets the id_path of this OntologyTerm.

        slash-separated list of the ID path hierarchy  # noqa: E501

        :param id_path: The id_path of this OntologyTerm.  # noqa: E501
        :type: str
        """

        self._id_path = id_path

    @property
    def name_path(self):
        """Gets the name_path of this OntologyTerm.  # noqa: E501

        slash-separated list of the name path hierarchy  # noqa: E501

        :return: The name_path of this OntologyTerm.  # noqa: E501
        :rtype: str
        """
        return self._name_path

    @name_path.setter
    def name_path(self, name_path):
        """Sets the name_path of this OntologyTerm.

        slash-separated list of the name path hierarchy  # noqa: E501

        :param name_path: The name_path of this OntologyTerm.  # noqa: E501
        :type: str
        """

        self._name_path = name_path

    @property
    def namespace(self):
        """Gets the namespace of this OntologyTerm.  # noqa: E501


        :return: The namespace of this OntologyTerm.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this OntologyTerm.


        :param namespace: The namespace of this OntologyTerm.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def obsolete(self):
        """Gets the obsolete of this OntologyTerm.  # noqa: E501


        :return: The obsolete of this OntologyTerm.  # noqa: E501
        :rtype: bool
        """
        return self._obsolete

    @obsolete.setter
    def obsolete(self, obsolete):
        """Sets the obsolete of this OntologyTerm.


        :param obsolete: The obsolete of this OntologyTerm.  # noqa: E501
        :type: bool
        """

        self._obsolete = obsolete

    @property
    def sem_type_id_path(self):
        """Gets the sem_type_id_path of this OntologyTerm.  # noqa: E501

        slash-separated list of the semantic type ID path hierarchy  # noqa: E501

        :return: The sem_type_id_path of this OntologyTerm.  # noqa: E501
        :rtype: str
        """
        return self._sem_type_id_path

    @sem_type_id_path.setter
    def sem_type_id_path(self, sem_type_id_path):
        """Sets the sem_type_id_path of this OntologyTerm.

        slash-separated list of the semantic type ID path hierarchy  # noqa: E501

        :param sem_type_id_path: The sem_type_id_path of this OntologyTerm.  # noqa: E501
        :type: str
        """

        self._sem_type_id_path = sem_type_id_path

    @property
    def sem_type_name_path(self):
        """Gets the sem_type_name_path of this OntologyTerm.  # noqa: E501

        slash-separated list of the semantic type name path hierarchy  # noqa: E501

        :return: The sem_type_name_path of this OntologyTerm.  # noqa: E501
        :rtype: str
        """
        return self._sem_type_name_path

    @sem_type_name_path.setter
    def sem_type_name_path(self, sem_type_name_path):
        """Sets the sem_type_name_path of this OntologyTerm.

        slash-separated list of the semantic type name path hierarchy  # noqa: E501

        :param sem_type_name_path: The sem_type_name_path of this OntologyTerm.  # noqa: E501
        :type: str
        """

        self._sem_type_name_path = sem_type_name_path

    @property
    def synonyms(self):
        """Gets the synonyms of this OntologyTerm.  # noqa: E501


        :return: The synonyms of this OntologyTerm.  # noqa: E501
        :rtype: list[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this OntologyTerm.


        :param synonyms: The synonyms of this OntologyTerm.  # noqa: E501
        :type: list[str]
        """

        self._synonyms = synonyms

    @property
    def xrefs(self):
        """Gets the xrefs of this OntologyTerm.  # noqa: E501


        :return: The xrefs of this OntologyTerm.  # noqa: E501
        :rtype: list[str]
        """
        return self._xrefs

    @xrefs.setter
    def xrefs(self, xrefs):
        """Sets the xrefs of this OntologyTerm.


        :param xrefs: The xrefs of this OntologyTerm.  # noqa: E501
        :type: list[str]
        """

        self._xrefs = xrefs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OntologyTerm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OntologyTerm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
