# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: support@vyasa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatementSearchCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'q': 'str',
        'rows': 'float',
        'start': 'float',
        'sort': 'str',
        'sort_order': 'str',
        'document_ids': 'list[str]',
        'start_offset': 'float',
        'aggs': 'object',
        'column_filters': 'list[ColumnFilter]'
    }

    attribute_map = {
        'q': 'q',
        'rows': 'rows',
        'start': 'start',
        'sort': 'sort',
        'sort_order': 'sortOrder',
        'document_ids': 'documentIds',
        'start_offset': 'startOffset',
        'aggs': 'aggs',
        'column_filters': 'columnFilters'
    }

    def __init__(self, q=None, rows=None, start=None, sort=None, sort_order=None, document_ids=None, start_offset=None, aggs=None, column_filters=None):  # noqa: E501
        """StatementSearchCommand - a model defined in Swagger"""  # noqa: E501
        self._q = None
        self._rows = None
        self._start = None
        self._sort = None
        self._sort_order = None
        self._document_ids = None
        self._start_offset = None
        self._aggs = None
        self._column_filters = None
        self.discriminator = None
        if q is not None:
            self.q = q
        if rows is not None:
            self.rows = rows
        if start is not None:
            self.start = start
        if sort is not None:
            self.sort = sort
        if sort_order is not None:
            self.sort_order = sort_order
        if document_ids is not None:
            self.document_ids = document_ids
        if start_offset is not None:
            self.start_offset = start_offset
        if aggs is not None:
            self.aggs = aggs
        if column_filters is not None:
            self.column_filters = column_filters

    @property
    def q(self):
        """Gets the q of this StatementSearchCommand.  # noqa: E501


        :return: The q of this StatementSearchCommand.  # noqa: E501
        :rtype: str
        """
        return self._q

    @q.setter
    def q(self, q):
        """Sets the q of this StatementSearchCommand.


        :param q: The q of this StatementSearchCommand.  # noqa: E501
        :type: str
        """

        self._q = q

    @property
    def rows(self):
        """Gets the rows of this StatementSearchCommand.  # noqa: E501


        :return: The rows of this StatementSearchCommand.  # noqa: E501
        :rtype: float
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this StatementSearchCommand.


        :param rows: The rows of this StatementSearchCommand.  # noqa: E501
        :type: float
        """

        self._rows = rows

    @property
    def start(self):
        """Gets the start of this StatementSearchCommand.  # noqa: E501


        :return: The start of this StatementSearchCommand.  # noqa: E501
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this StatementSearchCommand.


        :param start: The start of this StatementSearchCommand.  # noqa: E501
        :type: float
        """

        self._start = start

    @property
    def sort(self):
        """Gets the sort of this StatementSearchCommand.  # noqa: E501


        :return: The sort of this StatementSearchCommand.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this StatementSearchCommand.


        :param sort: The sort of this StatementSearchCommand.  # noqa: E501
        :type: str
        """

        self._sort = sort

    @property
    def sort_order(self):
        """Gets the sort_order of this StatementSearchCommand.  # noqa: E501


        :return: The sort_order of this StatementSearchCommand.  # noqa: E501
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this StatementSearchCommand.


        :param sort_order: The sort_order of this StatementSearchCommand.  # noqa: E501
        :type: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order

    @property
    def document_ids(self):
        """Gets the document_ids of this StatementSearchCommand.  # noqa: E501


        :return: The document_ids of this StatementSearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._document_ids

    @document_ids.setter
    def document_ids(self, document_ids):
        """Sets the document_ids of this StatementSearchCommand.


        :param document_ids: The document_ids of this StatementSearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._document_ids = document_ids

    @property
    def start_offset(self):
        """Gets the start_offset of this StatementSearchCommand.  # noqa: E501


        :return: The start_offset of this StatementSearchCommand.  # noqa: E501
        :rtype: float
        """
        return self._start_offset

    @start_offset.setter
    def start_offset(self, start_offset):
        """Sets the start_offset of this StatementSearchCommand.


        :param start_offset: The start_offset of this StatementSearchCommand.  # noqa: E501
        :type: float
        """

        self._start_offset = start_offset

    @property
    def aggs(self):
        """Gets the aggs of this StatementSearchCommand.  # noqa: E501


        :return: The aggs of this StatementSearchCommand.  # noqa: E501
        :rtype: object
        """
        return self._aggs

    @aggs.setter
    def aggs(self, aggs):
        """Sets the aggs of this StatementSearchCommand.


        :param aggs: The aggs of this StatementSearchCommand.  # noqa: E501
        :type: object
        """

        self._aggs = aggs

    @property
    def column_filters(self):
        """Gets the column_filters of this StatementSearchCommand.  # noqa: E501


        :return: The column_filters of this StatementSearchCommand.  # noqa: E501
        :rtype: list[ColumnFilter]
        """
        return self._column_filters

    @column_filters.setter
    def column_filters(self, column_filters):
        """Sets the column_filters of this StatementSearchCommand.


        :param column_filters: The column_filters of this StatementSearchCommand.  # noqa: E501
        :type: list[ColumnFilter]
        """

        self._column_filters = column_filters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatementSearchCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatementSearchCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
