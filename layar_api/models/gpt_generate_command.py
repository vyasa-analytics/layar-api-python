# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: support@vyasa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GptGenerateCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'str',
        'task': 'str',
        'message_history': 'list[LayargptgenerateMessageHistory]',
        'sources': 'LayargptgenerateSources',
        'max_tokens': 'float',
        'temperature': 'float',
        'top_k': 'float',
        'top_p': 'float',
        'sample': 'bool',
        'conversation': 'LayargptgenerateConversation',
        'summarize': 'LayargptgenerateConversation',
        'prompts': 'LayargptgeneratePrompts'
    }

    attribute_map = {
        'content': 'content',
        'task': 'task',
        'message_history': 'messageHistory',
        'sources': 'sources',
        'max_tokens': 'max_tokens',
        'temperature': 'temperature',
        'top_k': 'top_k',
        'top_p': 'top_p',
        'sample': 'sample',
        'conversation': 'conversation',
        'summarize': 'summarize',
        'prompts': 'prompts'
    }

    def __init__(self, content=None, task=None, message_history=None, sources=None, max_tokens=None, temperature=None, top_k=None, top_p=None, sample=None, conversation=None, summarize=None, prompts=None):  # noqa: E501
        """GptGenerateCommand - a model defined in Swagger"""  # noqa: E501
        self._content = None
        self._task = None
        self._message_history = None
        self._sources = None
        self._max_tokens = None
        self._temperature = None
        self._top_k = None
        self._top_p = None
        self._sample = None
        self._conversation = None
        self._summarize = None
        self._prompts = None
        self.discriminator = None
        self.content = content
        self.task = task
        self.message_history = message_history
        if sources is not None:
            self.sources = sources
        if max_tokens is not None:
            self.max_tokens = max_tokens
        if temperature is not None:
            self.temperature = temperature
        if top_k is not None:
            self.top_k = top_k
        if top_p is not None:
            self.top_p = top_p
        if sample is not None:
            self.sample = sample
        if conversation is not None:
            self.conversation = conversation
        if summarize is not None:
            self.summarize = summarize
        if prompts is not None:
            self.prompts = prompts

    @property
    def content(self):
        """Gets the content of this GptGenerateCommand.  # noqa: E501


        :return: The content of this GptGenerateCommand.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this GptGenerateCommand.


        :param content: The content of this GptGenerateCommand.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def task(self):
        """Gets the task of this GptGenerateCommand.  # noqa: E501


        :return: The task of this GptGenerateCommand.  # noqa: E501
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this GptGenerateCommand.


        :param task: The task of this GptGenerateCommand.  # noqa: E501
        :type: str
        """
        if task is None:
            raise ValueError("Invalid value for `task`, must not be `None`")  # noqa: E501

        self._task = task

    @property
    def message_history(self):
        """Gets the message_history of this GptGenerateCommand.  # noqa: E501


        :return: The message_history of this GptGenerateCommand.  # noqa: E501
        :rtype: list[LayargptgenerateMessageHistory]
        """
        return self._message_history

    @message_history.setter
    def message_history(self, message_history):
        """Sets the message_history of this GptGenerateCommand.


        :param message_history: The message_history of this GptGenerateCommand.  # noqa: E501
        :type: list[LayargptgenerateMessageHistory]
        """
        if message_history is None:
            raise ValueError("Invalid value for `message_history`, must not be `None`")  # noqa: E501

        self._message_history = message_history

    @property
    def sources(self):
        """Gets the sources of this GptGenerateCommand.  # noqa: E501


        :return: The sources of this GptGenerateCommand.  # noqa: E501
        :rtype: LayargptgenerateSources
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this GptGenerateCommand.


        :param sources: The sources of this GptGenerateCommand.  # noqa: E501
        :type: LayargptgenerateSources
        """

        self._sources = sources

    @property
    def max_tokens(self):
        """Gets the max_tokens of this GptGenerateCommand.  # noqa: E501


        :return: The max_tokens of this GptGenerateCommand.  # noqa: E501
        :rtype: float
        """
        return self._max_tokens

    @max_tokens.setter
    def max_tokens(self, max_tokens):
        """Sets the max_tokens of this GptGenerateCommand.


        :param max_tokens: The max_tokens of this GptGenerateCommand.  # noqa: E501
        :type: float
        """

        self._max_tokens = max_tokens

    @property
    def temperature(self):
        """Gets the temperature of this GptGenerateCommand.  # noqa: E501


        :return: The temperature of this GptGenerateCommand.  # noqa: E501
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this GptGenerateCommand.


        :param temperature: The temperature of this GptGenerateCommand.  # noqa: E501
        :type: float
        """

        self._temperature = temperature

    @property
    def top_k(self):
        """Gets the top_k of this GptGenerateCommand.  # noqa: E501


        :return: The top_k of this GptGenerateCommand.  # noqa: E501
        :rtype: float
        """
        return self._top_k

    @top_k.setter
    def top_k(self, top_k):
        """Sets the top_k of this GptGenerateCommand.


        :param top_k: The top_k of this GptGenerateCommand.  # noqa: E501
        :type: float
        """

        self._top_k = top_k

    @property
    def top_p(self):
        """Gets the top_p of this GptGenerateCommand.  # noqa: E501


        :return: The top_p of this GptGenerateCommand.  # noqa: E501
        :rtype: float
        """
        return self._top_p

    @top_p.setter
    def top_p(self, top_p):
        """Sets the top_p of this GptGenerateCommand.


        :param top_p: The top_p of this GptGenerateCommand.  # noqa: E501
        :type: float
        """

        self._top_p = top_p

    @property
    def sample(self):
        """Gets the sample of this GptGenerateCommand.  # noqa: E501


        :return: The sample of this GptGenerateCommand.  # noqa: E501
        :rtype: bool
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """Sets the sample of this GptGenerateCommand.


        :param sample: The sample of this GptGenerateCommand.  # noqa: E501
        :type: bool
        """

        self._sample = sample

    @property
    def conversation(self):
        """Gets the conversation of this GptGenerateCommand.  # noqa: E501


        :return: The conversation of this GptGenerateCommand.  # noqa: E501
        :rtype: LayargptgenerateConversation
        """
        return self._conversation

    @conversation.setter
    def conversation(self, conversation):
        """Sets the conversation of this GptGenerateCommand.


        :param conversation: The conversation of this GptGenerateCommand.  # noqa: E501
        :type: LayargptgenerateConversation
        """

        self._conversation = conversation

    @property
    def summarize(self):
        """Gets the summarize of this GptGenerateCommand.  # noqa: E501


        :return: The summarize of this GptGenerateCommand.  # noqa: E501
        :rtype: LayargptgenerateConversation
        """
        return self._summarize

    @summarize.setter
    def summarize(self, summarize):
        """Sets the summarize of this GptGenerateCommand.


        :param summarize: The summarize of this GptGenerateCommand.  # noqa: E501
        :type: LayargptgenerateConversation
        """

        self._summarize = summarize

    @property
    def prompts(self):
        """Gets the prompts of this GptGenerateCommand.  # noqa: E501


        :return: The prompts of this GptGenerateCommand.  # noqa: E501
        :rtype: LayargptgeneratePrompts
        """
        return self._prompts

    @prompts.setter
    def prompts(self, prompts):
        """Sets the prompts of this GptGenerateCommand.


        :param prompts: The prompts of this GptGenerateCommand.  # noqa: E501
        :type: LayargptgeneratePrompts
        """

        self._prompts = prompts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GptGenerateCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GptGenerateCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
