# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: support@vyasa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ParagraphExcludeSearchCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_ids': 'list[str]',
        'highlight': 'bool',
        'highlight_fragment_size': 'int',
        'highlight_number_of_fragments': 'int',
        'highlight_post_tag': 'str',
        'highlight_pre_tag': 'str',
        'ids': 'list[str]',
        'similar_ids': 'list[str]',
        'similar_text': 'list[str]',
        'sources': 'list[str]'
    }

    attribute_map = {
        'document_ids': 'documentIds',
        'highlight': 'highlight',
        'highlight_fragment_size': 'highlightFragmentSize',
        'highlight_number_of_fragments': 'highlightNumberOfFragments',
        'highlight_post_tag': 'highlightPostTag',
        'highlight_pre_tag': 'highlightPreTag',
        'ids': 'ids',
        'similar_ids': 'similarIds',
        'similar_text': 'similarText',
        'sources': 'sources'
    }

    def __init__(self, document_ids=None, highlight=None, highlight_fragment_size=None, highlight_number_of_fragments=None, highlight_post_tag=None, highlight_pre_tag=None, ids=None, similar_ids=None, similar_text=None, sources=None):  # noqa: E501
        """ParagraphExcludeSearchCommand - a model defined in Swagger"""  # noqa: E501
        self._document_ids = None
        self._highlight = None
        self._highlight_fragment_size = None
        self._highlight_number_of_fragments = None
        self._highlight_post_tag = None
        self._highlight_pre_tag = None
        self._ids = None
        self._similar_ids = None
        self._similar_text = None
        self._sources = None
        self.discriminator = None
        if document_ids is not None:
            self.document_ids = document_ids
        if highlight is not None:
            self.highlight = highlight
        if highlight_fragment_size is not None:
            self.highlight_fragment_size = highlight_fragment_size
        if highlight_number_of_fragments is not None:
            self.highlight_number_of_fragments = highlight_number_of_fragments
        if highlight_post_tag is not None:
            self.highlight_post_tag = highlight_post_tag
        if highlight_pre_tag is not None:
            self.highlight_pre_tag = highlight_pre_tag
        if ids is not None:
            self.ids = ids
        if similar_ids is not None:
            self.similar_ids = similar_ids
        if similar_text is not None:
            self.similar_text = similar_text
        if sources is not None:
            self.sources = sources

    @property
    def document_ids(self):
        """Gets the document_ids of this ParagraphExcludeSearchCommand.  # noqa: E501


        :return: The document_ids of this ParagraphExcludeSearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._document_ids

    @document_ids.setter
    def document_ids(self, document_ids):
        """Sets the document_ids of this ParagraphExcludeSearchCommand.


        :param document_ids: The document_ids of this ParagraphExcludeSearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._document_ids = document_ids

    @property
    def highlight(self):
        """Gets the highlight of this ParagraphExcludeSearchCommand.  # noqa: E501


        :return: The highlight of this ParagraphExcludeSearchCommand.  # noqa: E501
        :rtype: bool
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this ParagraphExcludeSearchCommand.


        :param highlight: The highlight of this ParagraphExcludeSearchCommand.  # noqa: E501
        :type: bool
        """

        self._highlight = highlight

    @property
    def highlight_fragment_size(self):
        """Gets the highlight_fragment_size of this ParagraphExcludeSearchCommand.  # noqa: E501


        :return: The highlight_fragment_size of this ParagraphExcludeSearchCommand.  # noqa: E501
        :rtype: int
        """
        return self._highlight_fragment_size

    @highlight_fragment_size.setter
    def highlight_fragment_size(self, highlight_fragment_size):
        """Sets the highlight_fragment_size of this ParagraphExcludeSearchCommand.


        :param highlight_fragment_size: The highlight_fragment_size of this ParagraphExcludeSearchCommand.  # noqa: E501
        :type: int
        """

        self._highlight_fragment_size = highlight_fragment_size

    @property
    def highlight_number_of_fragments(self):
        """Gets the highlight_number_of_fragments of this ParagraphExcludeSearchCommand.  # noqa: E501


        :return: The highlight_number_of_fragments of this ParagraphExcludeSearchCommand.  # noqa: E501
        :rtype: int
        """
        return self._highlight_number_of_fragments

    @highlight_number_of_fragments.setter
    def highlight_number_of_fragments(self, highlight_number_of_fragments):
        """Sets the highlight_number_of_fragments of this ParagraphExcludeSearchCommand.


        :param highlight_number_of_fragments: The highlight_number_of_fragments of this ParagraphExcludeSearchCommand.  # noqa: E501
        :type: int
        """

        self._highlight_number_of_fragments = highlight_number_of_fragments

    @property
    def highlight_post_tag(self):
        """Gets the highlight_post_tag of this ParagraphExcludeSearchCommand.  # noqa: E501


        :return: The highlight_post_tag of this ParagraphExcludeSearchCommand.  # noqa: E501
        :rtype: str
        """
        return self._highlight_post_tag

    @highlight_post_tag.setter
    def highlight_post_tag(self, highlight_post_tag):
        """Sets the highlight_post_tag of this ParagraphExcludeSearchCommand.


        :param highlight_post_tag: The highlight_post_tag of this ParagraphExcludeSearchCommand.  # noqa: E501
        :type: str
        """

        self._highlight_post_tag = highlight_post_tag

    @property
    def highlight_pre_tag(self):
        """Gets the highlight_pre_tag of this ParagraphExcludeSearchCommand.  # noqa: E501


        :return: The highlight_pre_tag of this ParagraphExcludeSearchCommand.  # noqa: E501
        :rtype: str
        """
        return self._highlight_pre_tag

    @highlight_pre_tag.setter
    def highlight_pre_tag(self, highlight_pre_tag):
        """Sets the highlight_pre_tag of this ParagraphExcludeSearchCommand.


        :param highlight_pre_tag: The highlight_pre_tag of this ParagraphExcludeSearchCommand.  # noqa: E501
        :type: str
        """

        self._highlight_pre_tag = highlight_pre_tag

    @property
    def ids(self):
        """Gets the ids of this ParagraphExcludeSearchCommand.  # noqa: E501


        :return: The ids of this ParagraphExcludeSearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this ParagraphExcludeSearchCommand.


        :param ids: The ids of this ParagraphExcludeSearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._ids = ids

    @property
    def similar_ids(self):
        """Gets the similar_ids of this ParagraphExcludeSearchCommand.  # noqa: E501


        :return: The similar_ids of this ParagraphExcludeSearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._similar_ids

    @similar_ids.setter
    def similar_ids(self, similar_ids):
        """Sets the similar_ids of this ParagraphExcludeSearchCommand.


        :param similar_ids: The similar_ids of this ParagraphExcludeSearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._similar_ids = similar_ids

    @property
    def similar_text(self):
        """Gets the similar_text of this ParagraphExcludeSearchCommand.  # noqa: E501


        :return: The similar_text of this ParagraphExcludeSearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._similar_text

    @similar_text.setter
    def similar_text(self, similar_text):
        """Sets the similar_text of this ParagraphExcludeSearchCommand.


        :param similar_text: The similar_text of this ParagraphExcludeSearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._similar_text = similar_text

    @property
    def sources(self):
        """Gets the sources of this ParagraphExcludeSearchCommand.  # noqa: E501


        :return: The sources of this ParagraphExcludeSearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this ParagraphExcludeSearchCommand.


        :param sources: The sources of this ParagraphExcludeSearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._sources = sources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParagraphExcludeSearchCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParagraphExcludeSearchCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
