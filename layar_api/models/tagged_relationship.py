# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaggedRelationship(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'answer_end_offset': 'int',
        'answer_score': 'float',
        'answer_start_offset': 'int',
        'concatenated_concept_ids_string': 'str',
        'concept_ids': 'list[str]',
        'created_by_user': 'int',
        'date_indexed': 'datetime',
        'evidence_statement_id': 'str',
        'id': 'str',
        'left_concept_id': 'str',
        'name': 'str',
        'question': 'str',
        'relationship': 'str',
        'relationship_id': 'str',
        'right_concept_id': 'str'
    }

    attribute_map = {
        'answer_end_offset': 'answerEndOffset',
        'answer_score': 'answerScore',
        'answer_start_offset': 'answerStartOffset',
        'concatenated_concept_ids_string': 'concatenatedConceptIdsString',
        'concept_ids': 'conceptIds',
        'created_by_user': 'createdByUser',
        'date_indexed': 'dateIndexed',
        'evidence_statement_id': 'evidenceStatementId',
        'id': 'id',
        'left_concept_id': 'leftConceptId',
        'name': 'name',
        'question': 'question',
        'relationship': 'relationship',
        'relationship_id': 'relationshipId',
        'right_concept_id': 'rightConceptId'
    }

    def __init__(self, answer_end_offset=None, answer_score=None, answer_start_offset=None, concatenated_concept_ids_string=None, concept_ids=None, created_by_user=None, date_indexed=None, evidence_statement_id=None, id=None, left_concept_id=None, name=None, question=None, relationship=None, relationship_id=None, right_concept_id=None):  # noqa: E501
        """TaggedRelationship - a model defined in Swagger"""  # noqa: E501
        self._answer_end_offset = None
        self._answer_score = None
        self._answer_start_offset = None
        self._concatenated_concept_ids_string = None
        self._concept_ids = None
        self._created_by_user = None
        self._date_indexed = None
        self._evidence_statement_id = None
        self._id = None
        self._left_concept_id = None
        self._name = None
        self._question = None
        self._relationship = None
        self._relationship_id = None
        self._right_concept_id = None
        self.discriminator = None
        if answer_end_offset is not None:
            self.answer_end_offset = answer_end_offset
        if answer_score is not None:
            self.answer_score = answer_score
        if answer_start_offset is not None:
            self.answer_start_offset = answer_start_offset
        if concatenated_concept_ids_string is not None:
            self.concatenated_concept_ids_string = concatenated_concept_ids_string
        if concept_ids is not None:
            self.concept_ids = concept_ids
        if created_by_user is not None:
            self.created_by_user = created_by_user
        if date_indexed is not None:
            self.date_indexed = date_indexed
        if evidence_statement_id is not None:
            self.evidence_statement_id = evidence_statement_id
        if id is not None:
            self.id = id
        if left_concept_id is not None:
            self.left_concept_id = left_concept_id
        if name is not None:
            self.name = name
        if question is not None:
            self.question = question
        if relationship is not None:
            self.relationship = relationship
        if relationship_id is not None:
            self.relationship_id = relationship_id
        if right_concept_id is not None:
            self.right_concept_id = right_concept_id

    @property
    def answer_end_offset(self):
        """Gets the answer_end_offset of this TaggedRelationship.  # noqa: E501


        :return: The answer_end_offset of this TaggedRelationship.  # noqa: E501
        :rtype: int
        """
        return self._answer_end_offset

    @answer_end_offset.setter
    def answer_end_offset(self, answer_end_offset):
        """Sets the answer_end_offset of this TaggedRelationship.


        :param answer_end_offset: The answer_end_offset of this TaggedRelationship.  # noqa: E501
        :type: int
        """

        self._answer_end_offset = answer_end_offset

    @property
    def answer_score(self):
        """Gets the answer_score of this TaggedRelationship.  # noqa: E501


        :return: The answer_score of this TaggedRelationship.  # noqa: E501
        :rtype: float
        """
        return self._answer_score

    @answer_score.setter
    def answer_score(self, answer_score):
        """Sets the answer_score of this TaggedRelationship.


        :param answer_score: The answer_score of this TaggedRelationship.  # noqa: E501
        :type: float
        """

        self._answer_score = answer_score

    @property
    def answer_start_offset(self):
        """Gets the answer_start_offset of this TaggedRelationship.  # noqa: E501


        :return: The answer_start_offset of this TaggedRelationship.  # noqa: E501
        :rtype: int
        """
        return self._answer_start_offset

    @answer_start_offset.setter
    def answer_start_offset(self, answer_start_offset):
        """Sets the answer_start_offset of this TaggedRelationship.


        :param answer_start_offset: The answer_start_offset of this TaggedRelationship.  # noqa: E501
        :type: int
        """

        self._answer_start_offset = answer_start_offset

    @property
    def concatenated_concept_ids_string(self):
        """Gets the concatenated_concept_ids_string of this TaggedRelationship.  # noqa: E501


        :return: The concatenated_concept_ids_string of this TaggedRelationship.  # noqa: E501
        :rtype: str
        """
        return self._concatenated_concept_ids_string

    @concatenated_concept_ids_string.setter
    def concatenated_concept_ids_string(self, concatenated_concept_ids_string):
        """Sets the concatenated_concept_ids_string of this TaggedRelationship.


        :param concatenated_concept_ids_string: The concatenated_concept_ids_string of this TaggedRelationship.  # noqa: E501
        :type: str
        """

        self._concatenated_concept_ids_string = concatenated_concept_ids_string

    @property
    def concept_ids(self):
        """Gets the concept_ids of this TaggedRelationship.  # noqa: E501


        :return: The concept_ids of this TaggedRelationship.  # noqa: E501
        :rtype: list[str]
        """
        return self._concept_ids

    @concept_ids.setter
    def concept_ids(self, concept_ids):
        """Sets the concept_ids of this TaggedRelationship.


        :param concept_ids: The concept_ids of this TaggedRelationship.  # noqa: E501
        :type: list[str]
        """

        self._concept_ids = concept_ids

    @property
    def created_by_user(self):
        """Gets the created_by_user of this TaggedRelationship.  # noqa: E501


        :return: The created_by_user of this TaggedRelationship.  # noqa: E501
        :rtype: int
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this TaggedRelationship.


        :param created_by_user: The created_by_user of this TaggedRelationship.  # noqa: E501
        :type: int
        """

        self._created_by_user = created_by_user

    @property
    def date_indexed(self):
        """Gets the date_indexed of this TaggedRelationship.  # noqa: E501


        :return: The date_indexed of this TaggedRelationship.  # noqa: E501
        :rtype: datetime
        """
        return self._date_indexed

    @date_indexed.setter
    def date_indexed(self, date_indexed):
        """Sets the date_indexed of this TaggedRelationship.


        :param date_indexed: The date_indexed of this TaggedRelationship.  # noqa: E501
        :type: datetime
        """

        self._date_indexed = date_indexed

    @property
    def evidence_statement_id(self):
        """Gets the evidence_statement_id of this TaggedRelationship.  # noqa: E501


        :return: The evidence_statement_id of this TaggedRelationship.  # noqa: E501
        :rtype: str
        """
        return self._evidence_statement_id

    @evidence_statement_id.setter
    def evidence_statement_id(self, evidence_statement_id):
        """Sets the evidence_statement_id of this TaggedRelationship.


        :param evidence_statement_id: The evidence_statement_id of this TaggedRelationship.  # noqa: E501
        :type: str
        """

        self._evidence_statement_id = evidence_statement_id

    @property
    def id(self):
        """Gets the id of this TaggedRelationship.  # noqa: E501


        :return: The id of this TaggedRelationship.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaggedRelationship.


        :param id: The id of this TaggedRelationship.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def left_concept_id(self):
        """Gets the left_concept_id of this TaggedRelationship.  # noqa: E501


        :return: The left_concept_id of this TaggedRelationship.  # noqa: E501
        :rtype: str
        """
        return self._left_concept_id

    @left_concept_id.setter
    def left_concept_id(self, left_concept_id):
        """Sets the left_concept_id of this TaggedRelationship.


        :param left_concept_id: The left_concept_id of this TaggedRelationship.  # noqa: E501
        :type: str
        """

        self._left_concept_id = left_concept_id

    @property
    def name(self):
        """Gets the name of this TaggedRelationship.  # noqa: E501


        :return: The name of this TaggedRelationship.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaggedRelationship.


        :param name: The name of this TaggedRelationship.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def question(self):
        """Gets the question of this TaggedRelationship.  # noqa: E501


        :return: The question of this TaggedRelationship.  # noqa: E501
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this TaggedRelationship.


        :param question: The question of this TaggedRelationship.  # noqa: E501
        :type: str
        """

        self._question = question

    @property
    def relationship(self):
        """Gets the relationship of this TaggedRelationship.  # noqa: E501


        :return: The relationship of this TaggedRelationship.  # noqa: E501
        :rtype: str
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """Sets the relationship of this TaggedRelationship.


        :param relationship: The relationship of this TaggedRelationship.  # noqa: E501
        :type: str
        """

        self._relationship = relationship

    @property
    def relationship_id(self):
        """Gets the relationship_id of this TaggedRelationship.  # noqa: E501


        :return: The relationship_id of this TaggedRelationship.  # noqa: E501
        :rtype: str
        """
        return self._relationship_id

    @relationship_id.setter
    def relationship_id(self, relationship_id):
        """Sets the relationship_id of this TaggedRelationship.


        :param relationship_id: The relationship_id of this TaggedRelationship.  # noqa: E501
        :type: str
        """

        self._relationship_id = relationship_id

    @property
    def right_concept_id(self):
        """Gets the right_concept_id of this TaggedRelationship.  # noqa: E501


        :return: The right_concept_id of this TaggedRelationship.  # noqa: E501
        :rtype: str
        """
        return self._right_concept_id

    @right_concept_id.setter
    def right_concept_id(self, right_concept_id):
        """Sets the right_concept_id of this TaggedRelationship.


        :param right_concept_id: The right_concept_id of this TaggedRelationship.  # noqa: E501
        :type: str
        """

        self._right_concept_id = right_concept_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaggedRelationship, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaggedRelationship):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
