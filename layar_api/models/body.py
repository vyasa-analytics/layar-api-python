# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from layar_api.models.base_search_command import BaseSearchCommand  # noqa: F401,E501

class Body(BaseSearchCommand):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'concept_type_ids': 'list[str]',
        'concept_filter_type': 'str',
        'metadata_qs': 'list[str]',
        'name': 'str',
        'relevancy_max': 'int',
        'relevancy_min': 'int',
        'synonym_of_id': 'str'
    }
    if hasattr(BaseSearchCommand, "swagger_types"):
        swagger_types.update(BaseSearchCommand.swagger_types)

    attribute_map = {
        'concept_type_ids': 'conceptTypeIds',
        'concept_filter_type': 'conceptFilterType',
        'metadata_qs': 'metadataQs',
        'name': 'name',
        'relevancy_max': 'relevancyMax',
        'relevancy_min': 'relevancyMin',
        'synonym_of_id': 'synonymOfId'
    }
    if hasattr(BaseSearchCommand, "attribute_map"):
        attribute_map.update(BaseSearchCommand.attribute_map)

    def __init__(self, concept_type_ids=None, concept_filter_type=None, metadata_qs=None, name=None, relevancy_max=None, relevancy_min=None, synonym_of_id=None, *args, **kwargs):  # noqa: E501
        """Body - a model defined in Swagger"""  # noqa: E501
        self._concept_type_ids = None
        self._concept_filter_type = None
        self._metadata_qs = None
        self._name = None
        self._relevancy_max = None
        self._relevancy_min = None
        self._synonym_of_id = None
        self.discriminator = None
        if concept_type_ids is not None:
            self.concept_type_ids = concept_type_ids
        if concept_filter_type is not None:
            self.concept_filter_type = concept_filter_type
        if metadata_qs is not None:
            self.metadata_qs = metadata_qs
        if name is not None:
            self.name = name
        if relevancy_max is not None:
            self.relevancy_max = relevancy_max
        if relevancy_min is not None:
            self.relevancy_min = relevancy_min
        if synonym_of_id is not None:
            self.synonym_of_id = synonym_of_id
        BaseSearchCommand.__init__(self, *args, **kwargs)

    @property
    def concept_type_ids(self):
        """Gets the concept_type_ids of this Body.  # noqa: E501

        limit results to answers that came from specific questions  # noqa: E501

        :return: The concept_type_ids of this Body.  # noqa: E501
        :rtype: list[str]
        """
        return self._concept_type_ids

    @concept_type_ids.setter
    def concept_type_ids(self, concept_type_ids):
        """Sets the concept_type_ids of this Body.

        limit results to answers that came from specific questions  # noqa: E501

        :param concept_type_ids: The concept_type_ids of this Body.  # noqa: E501
        :type: list[str]
        """

        self._concept_type_ids = concept_type_ids

    @property
    def concept_filter_type(self):
        """Gets the concept_filter_type of this Body.  # noqa: E501


        :return: The concept_filter_type of this Body.  # noqa: E501
        :rtype: str
        """
        return self._concept_filter_type

    @concept_filter_type.setter
    def concept_filter_type(self, concept_filter_type):
        """Sets the concept_filter_type of this Body.


        :param concept_filter_type: The concept_filter_type of this Body.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "NOVEL", "VERIFIED"]  # noqa: E501
        if concept_filter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `concept_filter_type` ({0}), must be one of {1}"  # noqa: E501
                .format(concept_filter_type, allowed_values)
            )

        self._concept_filter_type = concept_filter_type

    @property
    def metadata_qs(self):
        """Gets the metadata_qs of this Body.  # noqa: E501

        limit to concepts with metadata matching one or more of the query strings  # noqa: E501

        :return: The metadata_qs of this Body.  # noqa: E501
        :rtype: list[str]
        """
        return self._metadata_qs

    @metadata_qs.setter
    def metadata_qs(self, metadata_qs):
        """Sets the metadata_qs of this Body.

        limit to concepts with metadata matching one or more of the query strings  # noqa: E501

        :param metadata_qs: The metadata_qs of this Body.  # noqa: E501
        :type: list[str]
        """

        self._metadata_qs = metadata_qs

    @property
    def name(self):
        """Gets the name of this Body.  # noqa: E501

        limit to concepts with a specific name  # noqa: E501

        :return: The name of this Body.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Body.

        limit to concepts with a specific name  # noqa: E501

        :param name: The name of this Body.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def relevancy_max(self):
        """Gets the relevancy_max of this Body.  # noqa: E501

        limit results to those having a relevance score less than `relevancyMax`  # noqa: E501

        :return: The relevancy_max of this Body.  # noqa: E501
        :rtype: int
        """
        return self._relevancy_max

    @relevancy_max.setter
    def relevancy_max(self, relevancy_max):
        """Sets the relevancy_max of this Body.

        limit results to those having a relevance score less than `relevancyMax`  # noqa: E501

        :param relevancy_max: The relevancy_max of this Body.  # noqa: E501
        :type: int
        """

        self._relevancy_max = relevancy_max

    @property
    def relevancy_min(self):
        """Gets the relevancy_min of this Body.  # noqa: E501

        limit results to those having a relevance score greater than `relevancyMin`  # noqa: E501

        :return: The relevancy_min of this Body.  # noqa: E501
        :rtype: int
        """
        return self._relevancy_min

    @relevancy_min.setter
    def relevancy_min(self, relevancy_min):
        """Sets the relevancy_min of this Body.

        limit results to those having a relevance score greater than `relevancyMin`  # noqa: E501

        :param relevancy_min: The relevancy_min of this Body.  # noqa: E501
        :type: int
        """

        self._relevancy_min = relevancy_min

    @property
    def synonym_of_id(self):
        """Gets the synonym_of_id of this Body.  # noqa: E501

        limit to synonyms of a particular concept  # noqa: E501

        :return: The synonym_of_id of this Body.  # noqa: E501
        :rtype: str
        """
        return self._synonym_of_id

    @synonym_of_id.setter
    def synonym_of_id(self, synonym_of_id):
        """Sets the synonym_of_id of this Body.

        limit to synonyms of a particular concept  # noqa: E501

        :param synonym_of_id: The synonym_of_id of this Body.  # noqa: E501
        :type: str
        """

        self._synonym_of_id = synonym_of_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
