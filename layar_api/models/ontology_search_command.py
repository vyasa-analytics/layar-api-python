# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: support@vyasa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from layar_api.models.base_search_command import BaseSearchCommand  # noqa: F401,E501

class OntologySearchCommand(BaseSearchCommand):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'db_ids': 'list[str]',
        'document_ids': 'list[str]',
        'id_paths': 'list[str]',
        'include_obsolete': 'bool',
        'name_paths': 'list[str]',
        'path_traversal': 'str',
        'terms': 'list[str]'
    }
    if hasattr(BaseSearchCommand, "swagger_types"):
        swagger_types.update(BaseSearchCommand.swagger_types)

    attribute_map = {
        'db_ids': 'dbIds',
        'document_ids': 'documentIds',
        'id_paths': 'idPaths',
        'include_obsolete': 'includeObsolete',
        'name_paths': 'namePaths',
        'path_traversal': 'pathTraversal',
        'terms': 'terms'
    }
    if hasattr(BaseSearchCommand, "attribute_map"):
        attribute_map.update(BaseSearchCommand.attribute_map)

    def __init__(self, db_ids=None, document_ids=None, id_paths=None, include_obsolete=None, name_paths=None, path_traversal=None, terms=None, *args, **kwargs):  # noqa: E501
        """OntologySearchCommand - a model defined in Swagger"""  # noqa: E501
        self._db_ids = None
        self._document_ids = None
        self._id_paths = None
        self._include_obsolete = None
        self._name_paths = None
        self._path_traversal = None
        self._terms = None
        self.discriminator = None
        if db_ids is not None:
            self.db_ids = db_ids
        if document_ids is not None:
            self.document_ids = document_ids
        if id_paths is not None:
            self.id_paths = id_paths
        if include_obsolete is not None:
            self.include_obsolete = include_obsolete
        if name_paths is not None:
            self.name_paths = name_paths
        if path_traversal is not None:
            self.path_traversal = path_traversal
        if terms is not None:
            self.terms = terms
        BaseSearchCommand.__init__(self, *args, **kwargs)

    @property
    def db_ids(self):
        """Gets the db_ids of this OntologySearchCommand.  # noqa: E501

        limit results to terms with specific IDs  # noqa: E501

        :return: The db_ids of this OntologySearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._db_ids

    @db_ids.setter
    def db_ids(self, db_ids):
        """Sets the db_ids of this OntologySearchCommand.

        limit results to terms with specific IDs  # noqa: E501

        :param db_ids: The db_ids of this OntologySearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._db_ids = db_ids

    @property
    def document_ids(self):
        """Gets the document_ids of this OntologySearchCommand.  # noqa: E501

        limit results to terms from specific documents  # noqa: E501

        :return: The document_ids of this OntologySearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._document_ids

    @document_ids.setter
    def document_ids(self, document_ids):
        """Sets the document_ids of this OntologySearchCommand.

        limit results to terms from specific documents  # noqa: E501

        :param document_ids: The document_ids of this OntologySearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._document_ids = document_ids

    @property
    def id_paths(self):
        """Gets the id_paths of this OntologySearchCommand.  # noqa: E501

        limit results to terms with specific ID paths  # noqa: E501

        :return: The id_paths of this OntologySearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_paths

    @id_paths.setter
    def id_paths(self, id_paths):
        """Sets the id_paths of this OntologySearchCommand.

        limit results to terms with specific ID paths  # noqa: E501

        :param id_paths: The id_paths of this OntologySearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._id_paths = id_paths

    @property
    def include_obsolete(self):
        """Gets the include_obsolete of this OntologySearchCommand.  # noqa: E501

        include obsolte terms in the results  # noqa: E501

        :return: The include_obsolete of this OntologySearchCommand.  # noqa: E501
        :rtype: bool
        """
        return self._include_obsolete

    @include_obsolete.setter
    def include_obsolete(self, include_obsolete):
        """Sets the include_obsolete of this OntologySearchCommand.

        include obsolte terms in the results  # noqa: E501

        :param include_obsolete: The include_obsolete of this OntologySearchCommand.  # noqa: E501
        :type: bool
        """

        self._include_obsolete = include_obsolete

    @property
    def name_paths(self):
        """Gets the name_paths of this OntologySearchCommand.  # noqa: E501

        limit results to terms with specific name paths  # noqa: E501

        :return: The name_paths of this OntologySearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._name_paths

    @name_paths.setter
    def name_paths(self, name_paths):
        """Sets the name_paths of this OntologySearchCommand.

        limit results to terms with specific name paths  # noqa: E501

        :param name_paths: The name_paths of this OntologySearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._name_paths = name_paths

    @property
    def path_traversal(self):
        """Gets the path_traversal of this OntologySearchCommand.  # noqa: E501

        limit results based on a specific traversal strategy when restricting by idPath or namePath  # noqa: E501

        :return: The path_traversal of this OntologySearchCommand.  # noqa: E501
        :rtype: str
        """
        return self._path_traversal

    @path_traversal.setter
    def path_traversal(self, path_traversal):
        """Sets the path_traversal of this OntologySearchCommand.

        limit results based on a specific traversal strategy when restricting by idPath or namePath  # noqa: E501

        :param path_traversal: The path_traversal of this OntologySearchCommand.  # noqa: E501
        :type: str
        """
        allowed_values = ["ROOT", "EXACT", "PREFIX", "PREFIX_DEEP"]  # noqa: E501
        if path_traversal not in allowed_values:
            raise ValueError(
                "Invalid value for `path_traversal` ({0}), must be one of {1}"  # noqa: E501
                .format(path_traversal, allowed_values)
            )

        self._path_traversal = path_traversal

    @property
    def terms(self):
        """Gets the terms of this OntologySearchCommand.  # noqa: E501

        limit results to terms matching the supplied terms (in either name or synonym)  # noqa: E501

        :return: The terms of this OntologySearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this OntologySearchCommand.

        limit results to terms matching the supplied terms (in either name or synonym)  # noqa: E501

        :param terms: The terms of this OntologySearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._terms = terms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OntologySearchCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OntologySearchCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
