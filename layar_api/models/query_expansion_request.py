# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: AI-Support@Certara.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QueryExpansionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query_text': 'str',
        'normalization': 'str',
        'stops': 'bool',
        'will_be_stemmed': 'bool',
        'topn': 'float',
        'synonym_expansion': 'QueryExpansionRequestSynonymExpansion'
    }

    attribute_map = {
        'query_text': 'query_text',
        'normalization': 'normalization',
        'stops': 'stops',
        'will_be_stemmed': 'will_be_stemmed',
        'topn': 'topn',
        'synonym_expansion': 'synonym_expansion'
    }

    def __init__(self, query_text=None, normalization=None, stops=None, will_be_stemmed=None, topn=None, synonym_expansion=None):  # noqa: E501
        """QueryExpansionRequest - a model defined in Swagger"""  # noqa: E501
        self._query_text = None
        self._normalization = None
        self._stops = None
        self._will_be_stemmed = None
        self._topn = None
        self._synonym_expansion = None
        self.discriminator = None
        if query_text is not None:
            self.query_text = query_text
        if normalization is not None:
            self.normalization = normalization
        if stops is not None:
            self.stops = stops
        if will_be_stemmed is not None:
            self.will_be_stemmed = will_be_stemmed
        if topn is not None:
            self.topn = topn
        if synonym_expansion is not None:
            self.synonym_expansion = synonym_expansion

    @property
    def query_text(self):
        """Gets the query_text of this QueryExpansionRequest.  # noqa: E501


        :return: The query_text of this QueryExpansionRequest.  # noqa: E501
        :rtype: str
        """
        return self._query_text

    @query_text.setter
    def query_text(self, query_text):
        """Sets the query_text of this QueryExpansionRequest.


        :param query_text: The query_text of this QueryExpansionRequest.  # noqa: E501
        :type: str
        """

        self._query_text = query_text

    @property
    def normalization(self):
        """Gets the normalization of this QueryExpansionRequest.  # noqa: E501


        :return: The normalization of this QueryExpansionRequest.  # noqa: E501
        :rtype: str
        """
        return self._normalization

    @normalization.setter
    def normalization(self, normalization):
        """Sets the normalization of this QueryExpansionRequest.


        :param normalization: The normalization of this QueryExpansionRequest.  # noqa: E501
        :type: str
        """

        self._normalization = normalization

    @property
    def stops(self):
        """Gets the stops of this QueryExpansionRequest.  # noqa: E501


        :return: The stops of this QueryExpansionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._stops

    @stops.setter
    def stops(self, stops):
        """Sets the stops of this QueryExpansionRequest.


        :param stops: The stops of this QueryExpansionRequest.  # noqa: E501
        :type: bool
        """

        self._stops = stops

    @property
    def will_be_stemmed(self):
        """Gets the will_be_stemmed of this QueryExpansionRequest.  # noqa: E501


        :return: The will_be_stemmed of this QueryExpansionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._will_be_stemmed

    @will_be_stemmed.setter
    def will_be_stemmed(self, will_be_stemmed):
        """Sets the will_be_stemmed of this QueryExpansionRequest.


        :param will_be_stemmed: The will_be_stemmed of this QueryExpansionRequest.  # noqa: E501
        :type: bool
        """

        self._will_be_stemmed = will_be_stemmed

    @property
    def topn(self):
        """Gets the topn of this QueryExpansionRequest.  # noqa: E501


        :return: The topn of this QueryExpansionRequest.  # noqa: E501
        :rtype: float
        """
        return self._topn

    @topn.setter
    def topn(self, topn):
        """Sets the topn of this QueryExpansionRequest.


        :param topn: The topn of this QueryExpansionRequest.  # noqa: E501
        :type: float
        """

        self._topn = topn

    @property
    def synonym_expansion(self):
        """Gets the synonym_expansion of this QueryExpansionRequest.  # noqa: E501


        :return: The synonym_expansion of this QueryExpansionRequest.  # noqa: E501
        :rtype: QueryExpansionRequestSynonymExpansion
        """
        return self._synonym_expansion

    @synonym_expansion.setter
    def synonym_expansion(self, synonym_expansion):
        """Sets the synonym_expansion of this QueryExpansionRequest.


        :param synonym_expansion: The synonym_expansion of this QueryExpansionRequest.  # noqa: E501
        :type: QueryExpansionRequestSynonymExpansion
        """

        self._synonym_expansion = synonym_expansion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueryExpansionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryExpansionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
