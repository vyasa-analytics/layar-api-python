# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: support@vyasa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeepLearningModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_indexed': 'datetime',
        'id': 'str',
        'input_url': 'str',
        'module_id': 'str',
        'name': 'str',
        'description': 'str',
        'project_computation_id': 'str',
        'project_id': 'str',
        'url': 'str'
    }

    attribute_map = {
        'date_indexed': 'dateIndexed',
        'id': 'id',
        'input_url': 'inputUrl',
        'module_id': 'moduleId',
        'name': 'name',
        'description': 'description',
        'project_computation_id': 'projectComputationId',
        'project_id': 'projectId',
        'url': 'url'
    }

    def __init__(self, date_indexed=None, id=None, input_url=None, module_id=None, name=None, description=None, project_computation_id=None, project_id=None, url=None):  # noqa: E501
        """DeepLearningModel - a model defined in Swagger"""  # noqa: E501
        self._date_indexed = None
        self._id = None
        self._input_url = None
        self._module_id = None
        self._name = None
        self._description = None
        self._project_computation_id = None
        self._project_id = None
        self._url = None
        self.discriminator = None
        if date_indexed is not None:
            self.date_indexed = date_indexed
        if id is not None:
            self.id = id
        if input_url is not None:
            self.input_url = input_url
        if module_id is not None:
            self.module_id = module_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if project_computation_id is not None:
            self.project_computation_id = project_computation_id
        if project_id is not None:
            self.project_id = project_id
        if url is not None:
            self.url = url

    @property
    def date_indexed(self):
        """Gets the date_indexed of this DeepLearningModel.  # noqa: E501


        :return: The date_indexed of this DeepLearningModel.  # noqa: E501
        :rtype: datetime
        """
        return self._date_indexed

    @date_indexed.setter
    def date_indexed(self, date_indexed):
        """Sets the date_indexed of this DeepLearningModel.


        :param date_indexed: The date_indexed of this DeepLearningModel.  # noqa: E501
        :type: datetime
        """

        self._date_indexed = date_indexed

    @property
    def id(self):
        """Gets the id of this DeepLearningModel.  # noqa: E501


        :return: The id of this DeepLearningModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeepLearningModel.


        :param id: The id of this DeepLearningModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def input_url(self):
        """Gets the input_url of this DeepLearningModel.  # noqa: E501


        :return: The input_url of this DeepLearningModel.  # noqa: E501
        :rtype: str
        """
        return self._input_url

    @input_url.setter
    def input_url(self, input_url):
        """Sets the input_url of this DeepLearningModel.


        :param input_url: The input_url of this DeepLearningModel.  # noqa: E501
        :type: str
        """

        self._input_url = input_url

    @property
    def module_id(self):
        """Gets the module_id of this DeepLearningModel.  # noqa: E501


        :return: The module_id of this DeepLearningModel.  # noqa: E501
        :rtype: str
        """
        return self._module_id

    @module_id.setter
    def module_id(self, module_id):
        """Sets the module_id of this DeepLearningModel.


        :param module_id: The module_id of this DeepLearningModel.  # noqa: E501
        :type: str
        """

        self._module_id = module_id

    @property
    def name(self):
        """Gets the name of this DeepLearningModel.  # noqa: E501


        :return: The name of this DeepLearningModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeepLearningModel.


        :param name: The name of this DeepLearningModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this DeepLearningModel.  # noqa: E501


        :return: The description of this DeepLearningModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeepLearningModel.


        :param description: The description of this DeepLearningModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def project_computation_id(self):
        """Gets the project_computation_id of this DeepLearningModel.  # noqa: E501


        :return: The project_computation_id of this DeepLearningModel.  # noqa: E501
        :rtype: str
        """
        return self._project_computation_id

    @project_computation_id.setter
    def project_computation_id(self, project_computation_id):
        """Sets the project_computation_id of this DeepLearningModel.


        :param project_computation_id: The project_computation_id of this DeepLearningModel.  # noqa: E501
        :type: str
        """

        self._project_computation_id = project_computation_id

    @property
    def project_id(self):
        """Gets the project_id of this DeepLearningModel.  # noqa: E501


        :return: The project_id of this DeepLearningModel.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this DeepLearningModel.


        :param project_id: The project_id of this DeepLearningModel.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def url(self):
        """Gets the url of this DeepLearningModel.  # noqa: E501


        :return: The url of this DeepLearningModel.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DeepLearningModel.


        :param url: The url of this DeepLearningModel.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeepLearningModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeepLearningModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
