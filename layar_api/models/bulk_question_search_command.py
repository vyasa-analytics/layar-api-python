# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: AI-Support@Certara.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from layar_api.models.base_search_command import BaseSearchCommand  # noqa: F401,E501

class BulkQuestionSearchCommand(BaseSearchCommand):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_grouping_key': 'str',
        'question_keys': 'list[str]',
        'saved_list_ids': 'list[str]',
        'job_id': 'str'
    }
    if hasattr(BaseSearchCommand, "swagger_types"):
        swagger_types.update(BaseSearchCommand.swagger_types)

    attribute_map = {
        'batch_grouping_key': 'batchGroupingKey',
        'question_keys': 'questionKeys',
        'saved_list_ids': 'savedListIds',
        'job_id': 'jobId'
    }
    if hasattr(BaseSearchCommand, "attribute_map"):
        attribute_map.update(BaseSearchCommand.attribute_map)

    def __init__(self, batch_grouping_key=None, question_keys=None, saved_list_ids=None, job_id=None, *args, **kwargs):  # noqa: E501
        """BulkQuestionSearchCommand - a model defined in Swagger"""  # noqa: E501
        self._batch_grouping_key = None
        self._question_keys = None
        self._saved_list_ids = None
        self._job_id = None
        self.discriminator = None
        if batch_grouping_key is not None:
            self.batch_grouping_key = batch_grouping_key
        if question_keys is not None:
            self.question_keys = question_keys
        if saved_list_ids is not None:
            self.saved_list_ids = saved_list_ids
        if job_id is not None:
            self.job_id = job_id
        BaseSearchCommand.__init__(self, *args, **kwargs)

    @property
    def batch_grouping_key(self):
        """Gets the batch_grouping_key of this BulkQuestionSearchCommand.  # noqa: E501

        limit results to answers from a batch query  # noqa: E501

        :return: The batch_grouping_key of this BulkQuestionSearchCommand.  # noqa: E501
        :rtype: str
        """
        return self._batch_grouping_key

    @batch_grouping_key.setter
    def batch_grouping_key(self, batch_grouping_key):
        """Sets the batch_grouping_key of this BulkQuestionSearchCommand.

        limit results to answers from a batch query  # noqa: E501

        :param batch_grouping_key: The batch_grouping_key of this BulkQuestionSearchCommand.  # noqa: E501
        :type: str
        """

        self._batch_grouping_key = batch_grouping_key

    @property
    def question_keys(self):
        """Gets the question_keys of this BulkQuestionSearchCommand.  # noqa: E501

        limit results to answers from a list of question keys  # noqa: E501

        :return: The question_keys of this BulkQuestionSearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._question_keys

    @question_keys.setter
    def question_keys(self, question_keys):
        """Sets the question_keys of this BulkQuestionSearchCommand.

        limit results to answers from a list of question keys  # noqa: E501

        :param question_keys: The question_keys of this BulkQuestionSearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._question_keys = question_keys

    @property
    def saved_list_ids(self):
        """Gets the saved_list_ids of this BulkQuestionSearchCommand.  # noqa: E501


        :return: The saved_list_ids of this BulkQuestionSearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._saved_list_ids

    @saved_list_ids.setter
    def saved_list_ids(self, saved_list_ids):
        """Sets the saved_list_ids of this BulkQuestionSearchCommand.


        :param saved_list_ids: The saved_list_ids of this BulkQuestionSearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._saved_list_ids = saved_list_ids

    @property
    def job_id(self):
        """Gets the job_id of this BulkQuestionSearchCommand.  # noqa: E501

        Job ID provided after submitting a bulk question answer job.  # noqa: E501

        :return: The job_id of this BulkQuestionSearchCommand.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this BulkQuestionSearchCommand.

        Job ID provided after submitting a bulk question answer job.  # noqa: E501

        :param job_id: The job_id of this BulkQuestionSearchCommand.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkQuestionSearchCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkQuestionSearchCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
