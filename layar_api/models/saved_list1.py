# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: support@vyasa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SavedList1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'list_type': 'str',
        'cross_queries': 'list[CrossQuery]',
        'searches': 'list[DistributedSourceDocumentSearchCommand]',
        'name': 'str'
    }

    attribute_map = {
        'description': 'description',
        'list_type': 'listType',
        'cross_queries': 'crossQueries',
        'searches': 'searches',
        'name': 'name'
    }

    def __init__(self, description=None, list_type=None, cross_queries=None, searches=None, name=None):  # noqa: E501
        """SavedList1 - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._list_type = None
        self._cross_queries = None
        self._searches = None
        self._name = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if list_type is not None:
            self.list_type = list_type
        if cross_queries is not None:
            self.cross_queries = cross_queries
        if searches is not None:
            self.searches = searches
        if name is not None:
            self.name = name

    @property
    def description(self):
        """Gets the description of this SavedList1.  # noqa: E501


        :return: The description of this SavedList1.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SavedList1.


        :param description: The description of this SavedList1.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def list_type(self):
        """Gets the list_type of this SavedList1.  # noqa: E501


        :return: The list_type of this SavedList1.  # noqa: E501
        :rtype: str
        """
        return self._list_type

    @list_type.setter
    def list_type(self, list_type):
        """Sets the list_type of this SavedList1.


        :param list_type: The list_type of this SavedList1.  # noqa: E501
        :type: str
        """

        self._list_type = list_type

    @property
    def cross_queries(self):
        """Gets the cross_queries of this SavedList1.  # noqa: E501


        :return: The cross_queries of this SavedList1.  # noqa: E501
        :rtype: list[CrossQuery]
        """
        return self._cross_queries

    @cross_queries.setter
    def cross_queries(self, cross_queries):
        """Sets the cross_queries of this SavedList1.


        :param cross_queries: The cross_queries of this SavedList1.  # noqa: E501
        :type: list[CrossQuery]
        """

        self._cross_queries = cross_queries

    @property
    def searches(self):
        """Gets the searches of this SavedList1.  # noqa: E501


        :return: The searches of this SavedList1.  # noqa: E501
        :rtype: list[DistributedSourceDocumentSearchCommand]
        """
        return self._searches

    @searches.setter
    def searches(self, searches):
        """Sets the searches of this SavedList1.


        :param searches: The searches of this SavedList1.  # noqa: E501
        :type: list[DistributedSourceDocumentSearchCommand]
        """

        self._searches = searches

    @property
    def name(self):
        """Gets the name of this SavedList1.  # noqa: E501


        :return: The name of this SavedList1.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SavedList1.


        :param name: The name of this SavedList1.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SavedList1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavedList1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
