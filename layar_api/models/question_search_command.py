# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from layar_api.models.base_search_command import BaseSearchCommand  # noqa: F401,E501

class QuestionSearchCommand(BaseSearchCommand):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_grouping_key': 'str',
        'complete': 'list[str]',
        'data_providers': 'list[str]',
        'query_strings': 'list[str]',
        'question_ids': 'list[str]',
        'question_key': 'str',
        'search': 'ParagraphQuestionSearchCommand',
        'single_doc_question_document_id': 'str',
        'source_fields': 'object',
        'type_of_search': 'QuestionAnswerTypeOfSearch'
    }
    if hasattr(BaseSearchCommand, "swagger_types"):
        swagger_types.update(BaseSearchCommand.swagger_types)

    attribute_map = {
        'batch_grouping_key': 'batchGroupingKey',
        'complete': 'complete',
        'data_providers': 'dataProviders',
        'query_strings': 'queryStrings',
        'question_ids': 'questionIds',
        'question_key': 'questionKey',
        'search': 'search',
        'single_doc_question_document_id': 'singleDocQuestionDocumentId',
        'source_fields': 'sourceFields',
        'type_of_search': 'typeOfSearch'
    }
    if hasattr(BaseSearchCommand, "attribute_map"):
        attribute_map.update(BaseSearchCommand.attribute_map)

    def __init__(self, batch_grouping_key=None, complete=None, data_providers=None, query_strings=None, question_ids=None, question_key=None, search=None, single_doc_question_document_id=None, source_fields=None, type_of_search=None, *args, **kwargs):  # noqa: E501
        """QuestionSearchCommand - a model defined in Swagger"""  # noqa: E501
        self._batch_grouping_key = None
        self._complete = None
        self._data_providers = None
        self._query_strings = None
        self._question_ids = None
        self._question_key = None
        self._search = None
        self._single_doc_question_document_id = None
        self._source_fields = None
        self._type_of_search = None
        self.discriminator = None
        if batch_grouping_key is not None:
            self.batch_grouping_key = batch_grouping_key
        if complete is not None:
            self.complete = complete
        if data_providers is not None:
            self.data_providers = data_providers
        if query_strings is not None:
            self.query_strings = query_strings
        if question_ids is not None:
            self.question_ids = question_ids
        if question_key is not None:
            self.question_key = question_key
        if search is not None:
            self.search = search
        if single_doc_question_document_id is not None:
            self.single_doc_question_document_id = single_doc_question_document_id
        if source_fields is not None:
            self.source_fields = source_fields
        if type_of_search is not None:
            self.type_of_search = type_of_search
        BaseSearchCommand.__init__(self, *args, **kwargs)

    @property
    def batch_grouping_key(self):
        """Gets the batch_grouping_key of this QuestionSearchCommand.  # noqa: E501

        limit results to answers from a batch query  # noqa: E501

        :return: The batch_grouping_key of this QuestionSearchCommand.  # noqa: E501
        :rtype: str
        """
        return self._batch_grouping_key

    @batch_grouping_key.setter
    def batch_grouping_key(self, batch_grouping_key):
        """Sets the batch_grouping_key of this QuestionSearchCommand.

        limit results to answers from a batch query  # noqa: E501

        :param batch_grouping_key: The batch_grouping_key of this QuestionSearchCommand.  # noqa: E501
        :type: str
        """

        self._batch_grouping_key = batch_grouping_key

    @property
    def complete(self):
        """Gets the complete of this QuestionSearchCommand.  # noqa: E501

        limit results to questions that have finished being answered  # noqa: E501

        :return: The complete of this QuestionSearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this QuestionSearchCommand.

        limit results to questions that have finished being answered  # noqa: E501

        :param complete: The complete of this QuestionSearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._complete = complete

    @property
    def data_providers(self):
        """Gets the data_providers of this QuestionSearchCommand.  # noqa: E501

        limit results to questions that contain specified data providers (host names)  # noqa: E501

        :return: The data_providers of this QuestionSearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_providers

    @data_providers.setter
    def data_providers(self, data_providers):
        """Sets the data_providers of this QuestionSearchCommand.

        limit results to questions that contain specified data providers (host names)  # noqa: E501

        :param data_providers: The data_providers of this QuestionSearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._data_providers = data_providers

    @property
    def query_strings(self):
        """Gets the query_strings of this QuestionSearchCommand.  # noqa: E501

        limit results to questions that contain specified query strings  # noqa: E501

        :return: The query_strings of this QuestionSearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._query_strings

    @query_strings.setter
    def query_strings(self, query_strings):
        """Sets the query_strings of this QuestionSearchCommand.

        limit results to questions that contain specified query strings  # noqa: E501

        :param query_strings: The query_strings of this QuestionSearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._query_strings = query_strings

    @property
    def question_ids(self):
        """Gets the question_ids of this QuestionSearchCommand.  # noqa: E501

        limit results to questions that have specifified identifiers  # noqa: E501

        :return: The question_ids of this QuestionSearchCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._question_ids

    @question_ids.setter
    def question_ids(self, question_ids):
        """Sets the question_ids of this QuestionSearchCommand.

        limit results to questions that have specifified identifiers  # noqa: E501

        :param question_ids: The question_ids of this QuestionSearchCommand.  # noqa: E501
        :type: list[str]
        """

        self._question_ids = question_ids

    @property
    def question_key(self):
        """Gets the question_key of this QuestionSearchCommand.  # noqa: E501

        limit results to answers with a specific question key  # noqa: E501

        :return: The question_key of this QuestionSearchCommand.  # noqa: E501
        :rtype: str
        """
        return self._question_key

    @question_key.setter
    def question_key(self, question_key):
        """Sets the question_key of this QuestionSearchCommand.

        limit results to answers with a specific question key  # noqa: E501

        :param question_key: The question_key of this QuestionSearchCommand.  # noqa: E501
        :type: str
        """

        self._question_key = question_key

    @property
    def search(self):
        """Gets the search of this QuestionSearchCommand.  # noqa: E501


        :return: The search of this QuestionSearchCommand.  # noqa: E501
        :rtype: ParagraphQuestionSearchCommand
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this QuestionSearchCommand.


        :param search: The search of this QuestionSearchCommand.  # noqa: E501
        :type: ParagraphQuestionSearchCommand
        """

        self._search = search

    @property
    def single_doc_question_document_id(self):
        """Gets the single_doc_question_document_id of this QuestionSearchCommand.  # noqa: E501

        include answers that were asked of a single document  # noqa: E501

        :return: The single_doc_question_document_id of this QuestionSearchCommand.  # noqa: E501
        :rtype: str
        """
        return self._single_doc_question_document_id

    @single_doc_question_document_id.setter
    def single_doc_question_document_id(self, single_doc_question_document_id):
        """Sets the single_doc_question_document_id of this QuestionSearchCommand.

        include answers that were asked of a single document  # noqa: E501

        :param single_doc_question_document_id: The single_doc_question_document_id of this QuestionSearchCommand.  # noqa: E501
        :type: str
        """

        self._single_doc_question_document_id = single_doc_question_document_id

    @property
    def source_fields(self):
        """Gets the source_fields of this QuestionSearchCommand.  # noqa: E501


        :return: The source_fields of this QuestionSearchCommand.  # noqa: E501
        :rtype: object
        """
        return self._source_fields

    @source_fields.setter
    def source_fields(self, source_fields):
        """Sets the source_fields of this QuestionSearchCommand.


        :param source_fields: The source_fields of this QuestionSearchCommand.  # noqa: E501
        :type: object
        """

        self._source_fields = source_fields

    @property
    def type_of_search(self):
        """Gets the type_of_search of this QuestionSearchCommand.  # noqa: E501


        :return: The type_of_search of this QuestionSearchCommand.  # noqa: E501
        :rtype: QuestionAnswerTypeOfSearch
        """
        return self._type_of_search

    @type_of_search.setter
    def type_of_search(self, type_of_search):
        """Sets the type_of_search of this QuestionSearchCommand.


        :param type_of_search: The type_of_search of this QuestionSearchCommand.  # noqa: E501
        :type: QuestionAnswerTypeOfSearch
        """

        self._type_of_search = type_of_search

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuestionSearchCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuestionSearchCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
