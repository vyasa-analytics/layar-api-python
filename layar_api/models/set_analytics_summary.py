# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SetAnalyticsSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'children': 'list[SetAnalyticsSummary]',
        'count': 'int',
        'counts_by_type': 'dict(str, int)',
        'relationships_to_children': 'list[str]'
    }

    attribute_map = {
        'children': 'children',
        'count': 'count',
        'counts_by_type': 'countsByType',
        'relationships_to_children': 'relationshipsToChildren'
    }

    def __init__(self, children=None, count=None, counts_by_type=None, relationships_to_children=None):  # noqa: E501
        """SetAnalyticsSummary - a model defined in Swagger"""  # noqa: E501
        self._children = None
        self._count = None
        self._counts_by_type = None
        self._relationships_to_children = None
        self.discriminator = None
        if children is not None:
            self.children = children
        if count is not None:
            self.count = count
        if counts_by_type is not None:
            self.counts_by_type = counts_by_type
        if relationships_to_children is not None:
            self.relationships_to_children = relationships_to_children

    @property
    def children(self):
        """Gets the children of this SetAnalyticsSummary.  # noqa: E501


        :return: The children of this SetAnalyticsSummary.  # noqa: E501
        :rtype: list[SetAnalyticsSummary]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this SetAnalyticsSummary.


        :param children: The children of this SetAnalyticsSummary.  # noqa: E501
        :type: list[SetAnalyticsSummary]
        """

        self._children = children

    @property
    def count(self):
        """Gets the count of this SetAnalyticsSummary.  # noqa: E501


        :return: The count of this SetAnalyticsSummary.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SetAnalyticsSummary.


        :param count: The count of this SetAnalyticsSummary.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def counts_by_type(self):
        """Gets the counts_by_type of this SetAnalyticsSummary.  # noqa: E501


        :return: The counts_by_type of this SetAnalyticsSummary.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._counts_by_type

    @counts_by_type.setter
    def counts_by_type(self, counts_by_type):
        """Sets the counts_by_type of this SetAnalyticsSummary.


        :param counts_by_type: The counts_by_type of this SetAnalyticsSummary.  # noqa: E501
        :type: dict(str, int)
        """

        self._counts_by_type = counts_by_type

    @property
    def relationships_to_children(self):
        """Gets the relationships_to_children of this SetAnalyticsSummary.  # noqa: E501


        :return: The relationships_to_children of this SetAnalyticsSummary.  # noqa: E501
        :rtype: list[str]
        """
        return self._relationships_to_children

    @relationships_to_children.setter
    def relationships_to_children(self, relationships_to_children):
        """Sets the relationships_to_children of this SetAnalyticsSummary.


        :param relationships_to_children: The relationships_to_children of this SetAnalyticsSummary.  # noqa: E501
        :type: list[str]
        """

        self._relationships_to_children = relationships_to_children

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetAnalyticsSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetAnalyticsSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
