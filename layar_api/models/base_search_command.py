# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseSearchCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_date': 'datetime',
        'q': 'str',
        'rows': 'int',
        'sort': 'str',
        'sort_order': 'str',
        'start': 'int',
        'to_date': 'datetime'
    }

    attribute_map = {
        'from_date': 'fromDate',
        'q': 'q',
        'rows': 'rows',
        'sort': 'sort',
        'sort_order': 'sortOrder',
        'start': 'start',
        'to_date': 'toDate'
    }

    def __init__(self, from_date=None, q=None, rows=None, sort=None, sort_order=None, start=None, to_date=None):  # noqa: E501
        """BaseSearchCommand - a model defined in Swagger"""  # noqa: E501
        self._from_date = None
        self._q = None
        self._rows = None
        self._sort = None
        self._sort_order = None
        self._start = None
        self._to_date = None
        self.discriminator = None
        if from_date is not None:
            self.from_date = from_date
        if q is not None:
            self.q = q
        if rows is not None:
            self.rows = rows
        if sort is not None:
            self.sort = sort
        if sort_order is not None:
            self.sort_order = sort_order
        if start is not None:
            self.start = start
        if to_date is not None:
            self.to_date = to_date

    @property
    def from_date(self):
        """Gets the from_date of this BaseSearchCommand.  # noqa: E501

        Starting date formatted as YYYY-MM-DD  # noqa: E501

        :return: The from_date of this BaseSearchCommand.  # noqa: E501
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this BaseSearchCommand.

        Starting date formatted as YYYY-MM-DD  # noqa: E501

        :param from_date: The from_date of this BaseSearchCommand.  # noqa: E501
        :type: datetime
        """

        self._from_date = from_date

    @property
    def q(self):
        """Gets the q of this BaseSearchCommand.  # noqa: E501

        The query string to search for  # noqa: E501

        :return: The q of this BaseSearchCommand.  # noqa: E501
        :rtype: str
        """
        return self._q

    @q.setter
    def q(self, q):
        """Sets the q of this BaseSearchCommand.

        The query string to search for  # noqa: E501

        :param q: The q of this BaseSearchCommand.  # noqa: E501
        :type: str
        """

        self._q = q

    @property
    def rows(self):
        """Gets the rows of this BaseSearchCommand.  # noqa: E501

        The number of results to return  # noqa: E501

        :return: The rows of this BaseSearchCommand.  # noqa: E501
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this BaseSearchCommand.

        The number of results to return  # noqa: E501

        :param rows: The rows of this BaseSearchCommand.  # noqa: E501
        :type: int
        """

        self._rows = rows

    @property
    def sort(self):
        """Gets the sort of this BaseSearchCommand.  # noqa: E501

        The result value to sort by  # noqa: E501

        :return: The sort of this BaseSearchCommand.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this BaseSearchCommand.

        The result value to sort by  # noqa: E501

        :param sort: The sort of this BaseSearchCommand.  # noqa: E501
        :type: str
        """

        self._sort = sort

    @property
    def sort_order(self):
        """Gets the sort_order of this BaseSearchCommand.  # noqa: E501

        The order to sort by (ex- 'ASC' or 'DESC')  # noqa: E501

        :return: The sort_order of this BaseSearchCommand.  # noqa: E501
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this BaseSearchCommand.

        The order to sort by (ex- 'ASC' or 'DESC')  # noqa: E501

        :param sort_order: The sort_order of this BaseSearchCommand.  # noqa: E501
        :type: str
        """

        self._sort_order = sort_order

    @property
    def start(self):
        """Gets the start of this BaseSearchCommand.  # noqa: E501

        The index of the row to start returning values from  # noqa: E501

        :return: The start of this BaseSearchCommand.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this BaseSearchCommand.

        The index of the row to start returning values from  # noqa: E501

        :param start: The start of this BaseSearchCommand.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def to_date(self):
        """Gets the to_date of this BaseSearchCommand.  # noqa: E501

        Ending date formatted as YYYY-MM-DD  # noqa: E501

        :return: The to_date of this BaseSearchCommand.  # noqa: E501
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this BaseSearchCommand.

        Ending date formatted as YYYY-MM-DD  # noqa: E501

        :param to_date: The to_date of this BaseSearchCommand.  # noqa: E501
        :type: datetime
        """

        self._to_date = to_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseSearchCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseSearchCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
