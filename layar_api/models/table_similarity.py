# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: AI-Support@Certara.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TableSimilarity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column1': 'SimilarColumn',
        'column2': 'SimilarColumn',
        'similarity': 'float'
    }

    attribute_map = {
        'column1': 'column1',
        'column2': 'column2',
        'similarity': 'similarity'
    }

    def __init__(self, column1=None, column2=None, similarity=None):  # noqa: E501
        """TableSimilarity - a model defined in Swagger"""  # noqa: E501
        self._column1 = None
        self._column2 = None
        self._similarity = None
        self.discriminator = None
        if column1 is not None:
            self.column1 = column1
        if column2 is not None:
            self.column2 = column2
        if similarity is not None:
            self.similarity = similarity

    @property
    def column1(self):
        """Gets the column1 of this TableSimilarity.  # noqa: E501


        :return: The column1 of this TableSimilarity.  # noqa: E501
        :rtype: SimilarColumn
        """
        return self._column1

    @column1.setter
    def column1(self, column1):
        """Sets the column1 of this TableSimilarity.


        :param column1: The column1 of this TableSimilarity.  # noqa: E501
        :type: SimilarColumn
        """

        self._column1 = column1

    @property
    def column2(self):
        """Gets the column2 of this TableSimilarity.  # noqa: E501


        :return: The column2 of this TableSimilarity.  # noqa: E501
        :rtype: SimilarColumn
        """
        return self._column2

    @column2.setter
    def column2(self, column2):
        """Sets the column2 of this TableSimilarity.


        :param column2: The column2 of this TableSimilarity.  # noqa: E501
        :type: SimilarColumn
        """

        self._column2 = column2

    @property
    def similarity(self):
        """Gets the similarity of this TableSimilarity.  # noqa: E501


        :return: The similarity of this TableSimilarity.  # noqa: E501
        :rtype: float
        """
        return self._similarity

    @similarity.setter
    def similarity(self, similarity):
        """Sets the similarity of this TableSimilarity.


        :param similarity: The similarity of this TableSimilarity.  # noqa: E501
        :type: float
        """

        self._similarity = similarity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableSimilarity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableSimilarity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
