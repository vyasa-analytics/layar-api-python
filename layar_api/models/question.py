# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from layar_api.models.domain_object import DomainObject  # noqa: F401,E501

class Question(DomainObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_grouping_key': 'str',
        'complete': 'bool',
        'concept_types': 'list[str]',
        'data_providers': 'str',
        'number_of_best_answers': 'int',
        'ontology_ids': 'list[str]',
        'query_string': 'str',
        'question_key': 'str',
        'search': 'ParagraphQuestionSearchCommand',
        'search_command_json_string': 'str',
        'single_doc_question_document_id': 'str',
        'type_of_search': 'str',
        'document_id': 'str',
        'template': 'str',
        'terms': 'list[str]',
        'values': 'Answer',
        'rejected_values': 'list[str]',
        'number_of_highlight_fragments': 'int'
    }
    if hasattr(DomainObject, "swagger_types"):
        swagger_types.update(DomainObject.swagger_types)

    attribute_map = {
        'batch_grouping_key': 'batchGroupingKey',
        'complete': 'complete',
        'concept_types': 'conceptTypes',
        'data_providers': 'dataProviders',
        'number_of_best_answers': 'numberOfBestAnswers',
        'ontology_ids': 'ontologyIds',
        'query_string': 'queryString',
        'question_key': 'questionKey',
        'search': 'search',
        'search_command_json_string': 'searchCommandJsonString',
        'single_doc_question_document_id': 'singleDocQuestionDocumentId',
        'type_of_search': 'typeOfSearch',
        'document_id': 'documentId',
        'template': 'template',
        'terms': 'terms',
        'values': 'values',
        'rejected_values': 'rejectedValues',
        'number_of_highlight_fragments': 'numberOfHighlightFragments'
    }
    if hasattr(DomainObject, "attribute_map"):
        attribute_map.update(DomainObject.attribute_map)

    def __init__(self, batch_grouping_key=None, complete=None, concept_types=None, data_providers=None, number_of_best_answers=None, ontology_ids=None, query_string=None, question_key=None, search=None, search_command_json_string=None, single_doc_question_document_id=None, type_of_search=None, document_id=None, template=None, terms=None, values=None, rejected_values=None, number_of_highlight_fragments=None, *args, **kwargs):  # noqa: E501
        """Question - a model defined in Swagger"""  # noqa: E501
        self._batch_grouping_key = None
        self._complete = None
        self._concept_types = None
        self._data_providers = None
        self._number_of_best_answers = None
        self._ontology_ids = None
        self._query_string = None
        self._question_key = None
        self._search = None
        self._search_command_json_string = None
        self._single_doc_question_document_id = None
        self._type_of_search = None
        self._document_id = None
        self._template = None
        self._terms = None
        self._values = None
        self._rejected_values = None
        self._number_of_highlight_fragments = None
        self.discriminator = None
        if batch_grouping_key is not None:
            self.batch_grouping_key = batch_grouping_key
        if complete is not None:
            self.complete = complete
        if concept_types is not None:
            self.concept_types = concept_types
        if data_providers is not None:
            self.data_providers = data_providers
        if number_of_best_answers is not None:
            self.number_of_best_answers = number_of_best_answers
        if ontology_ids is not None:
            self.ontology_ids = ontology_ids
        if query_string is not None:
            self.query_string = query_string
        if question_key is not None:
            self.question_key = question_key
        if search is not None:
            self.search = search
        if search_command_json_string is not None:
            self.search_command_json_string = search_command_json_string
        if single_doc_question_document_id is not None:
            self.single_doc_question_document_id = single_doc_question_document_id
        if type_of_search is not None:
            self.type_of_search = type_of_search
        if document_id is not None:
            self.document_id = document_id
        if template is not None:
            self.template = template
        if terms is not None:
            self.terms = terms
        if values is not None:
            self.values = values
        if rejected_values is not None:
            self.rejected_values = rejected_values
        if number_of_highlight_fragments is not None:
            self.number_of_highlight_fragments = number_of_highlight_fragments
        DomainObject.__init__(self, *args, **kwargs)

    @property
    def batch_grouping_key(self):
        """Gets the batch_grouping_key of this Question.  # noqa: E501


        :return: The batch_grouping_key of this Question.  # noqa: E501
        :rtype: str
        """
        return self._batch_grouping_key

    @batch_grouping_key.setter
    def batch_grouping_key(self, batch_grouping_key):
        """Sets the batch_grouping_key of this Question.


        :param batch_grouping_key: The batch_grouping_key of this Question.  # noqa: E501
        :type: str
        """

        self._batch_grouping_key = batch_grouping_key

    @property
    def complete(self):
        """Gets the complete of this Question.  # noqa: E501


        :return: The complete of this Question.  # noqa: E501
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this Question.


        :param complete: The complete of this Question.  # noqa: E501
        :type: bool
        """

        self._complete = complete

    @property
    def concept_types(self):
        """Gets the concept_types of this Question.  # noqa: E501


        :return: The concept_types of this Question.  # noqa: E501
        :rtype: list[str]
        """
        return self._concept_types

    @concept_types.setter
    def concept_types(self, concept_types):
        """Sets the concept_types of this Question.


        :param concept_types: The concept_types of this Question.  # noqa: E501
        :type: list[str]
        """

        self._concept_types = concept_types

    @property
    def data_providers(self):
        """Gets the data_providers of this Question.  # noqa: E501


        :return: The data_providers of this Question.  # noqa: E501
        :rtype: str
        """
        return self._data_providers

    @data_providers.setter
    def data_providers(self, data_providers):
        """Sets the data_providers of this Question.


        :param data_providers: The data_providers of this Question.  # noqa: E501
        :type: str
        """

        self._data_providers = data_providers

    @property
    def number_of_best_answers(self):
        """Gets the number_of_best_answers of this Question.  # noqa: E501


        :return: The number_of_best_answers of this Question.  # noqa: E501
        :rtype: int
        """
        return self._number_of_best_answers

    @number_of_best_answers.setter
    def number_of_best_answers(self, number_of_best_answers):
        """Sets the number_of_best_answers of this Question.


        :param number_of_best_answers: The number_of_best_answers of this Question.  # noqa: E501
        :type: int
        """

        self._number_of_best_answers = number_of_best_answers

    @property
    def ontology_ids(self):
        """Gets the ontology_ids of this Question.  # noqa: E501


        :return: The ontology_ids of this Question.  # noqa: E501
        :rtype: list[str]
        """
        return self._ontology_ids

    @ontology_ids.setter
    def ontology_ids(self, ontology_ids):
        """Sets the ontology_ids of this Question.


        :param ontology_ids: The ontology_ids of this Question.  # noqa: E501
        :type: list[str]
        """

        self._ontology_ids = ontology_ids

    @property
    def query_string(self):
        """Gets the query_string of this Question.  # noqa: E501


        :return: The query_string of this Question.  # noqa: E501
        :rtype: str
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """Sets the query_string of this Question.


        :param query_string: The query_string of this Question.  # noqa: E501
        :type: str
        """

        self._query_string = query_string

    @property
    def question_key(self):
        """Gets the question_key of this Question.  # noqa: E501


        :return: The question_key of this Question.  # noqa: E501
        :rtype: str
        """
        return self._question_key

    @question_key.setter
    def question_key(self, question_key):
        """Sets the question_key of this Question.


        :param question_key: The question_key of this Question.  # noqa: E501
        :type: str
        """

        self._question_key = question_key

    @property
    def search(self):
        """Gets the search of this Question.  # noqa: E501


        :return: The search of this Question.  # noqa: E501
        :rtype: ParagraphQuestionSearchCommand
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this Question.


        :param search: The search of this Question.  # noqa: E501
        :type: ParagraphQuestionSearchCommand
        """

        self._search = search

    @property
    def search_command_json_string(self):
        """Gets the search_command_json_string of this Question.  # noqa: E501


        :return: The search_command_json_string of this Question.  # noqa: E501
        :rtype: str
        """
        return self._search_command_json_string

    @search_command_json_string.setter
    def search_command_json_string(self, search_command_json_string):
        """Sets the search_command_json_string of this Question.


        :param search_command_json_string: The search_command_json_string of this Question.  # noqa: E501
        :type: str
        """

        self._search_command_json_string = search_command_json_string

    @property
    def single_doc_question_document_id(self):
        """Gets the single_doc_question_document_id of this Question.  # noqa: E501


        :return: The single_doc_question_document_id of this Question.  # noqa: E501
        :rtype: str
        """
        return self._single_doc_question_document_id

    @single_doc_question_document_id.setter
    def single_doc_question_document_id(self, single_doc_question_document_id):
        """Sets the single_doc_question_document_id of this Question.


        :param single_doc_question_document_id: The single_doc_question_document_id of this Question.  # noqa: E501
        :type: str
        """

        self._single_doc_question_document_id = single_doc_question_document_id

    @property
    def type_of_search(self):
        """Gets the type_of_search of this Question.  # noqa: E501


        :return: The type_of_search of this Question.  # noqa: E501
        :rtype: str
        """
        return self._type_of_search

    @type_of_search.setter
    def type_of_search(self, type_of_search):
        """Sets the type_of_search of this Question.


        :param type_of_search: The type_of_search of this Question.  # noqa: E501
        :type: str
        """
        allowed_values = ["DOCUMENT", "PARAGRAPH"]  # noqa: E501
        if type_of_search not in allowed_values:
            raise ValueError(
                "Invalid value for `type_of_search` ({0}), must be one of {1}"  # noqa: E501
                .format(type_of_search, allowed_values)
            )

        self._type_of_search = type_of_search

    @property
    def document_id(self):
        """Gets the document_id of this Question.  # noqa: E501


        :return: The document_id of this Question.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this Question.


        :param document_id: The document_id of this Question.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def template(self):
        """Gets the template of this Question.  # noqa: E501


        :return: The template of this Question.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Question.


        :param template: The template of this Question.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def terms(self):
        """Gets the terms of this Question.  # noqa: E501


        :return: The terms of this Question.  # noqa: E501
        :rtype: list[str]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this Question.


        :param terms: The terms of this Question.  # noqa: E501
        :type: list[str]
        """

        self._terms = terms

    @property
    def values(self):
        """Gets the values of this Question.  # noqa: E501


        :return: The values of this Question.  # noqa: E501
        :rtype: Answer
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Question.


        :param values: The values of this Question.  # noqa: E501
        :type: Answer
        """

        self._values = values

    @property
    def rejected_values(self):
        """Gets the rejected_values of this Question.  # noqa: E501


        :return: The rejected_values of this Question.  # noqa: E501
        :rtype: list[str]
        """
        return self._rejected_values

    @rejected_values.setter
    def rejected_values(self, rejected_values):
        """Sets the rejected_values of this Question.


        :param rejected_values: The rejected_values of this Question.  # noqa: E501
        :type: list[str]
        """

        self._rejected_values = rejected_values

    @property
    def number_of_highlight_fragments(self):
        """Gets the number_of_highlight_fragments of this Question.  # noqa: E501


        :return: The number_of_highlight_fragments of this Question.  # noqa: E501
        :rtype: int
        """
        return self._number_of_highlight_fragments

    @number_of_highlight_fragments.setter
    def number_of_highlight_fragments(self, number_of_highlight_fragments):
        """Sets the number_of_highlight_fragments of this Question.


        :param number_of_highlight_fragments: The number_of_highlight_fragments of this Question.  # noqa: E501
        :type: int
        """

        self._number_of_highlight_fragments = number_of_highlight_fragments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Question, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Question):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
