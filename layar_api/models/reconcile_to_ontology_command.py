# coding: utf-8

"""
    Layar API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: VERSION_PLACEHOLDER
    Contact: support@vyasa.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReconcileToOntologyCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ontology_id': 'str',
        'terms': 'list[str]',
        'max_predictions': 'int',
        'threshold': 'float'
    }

    attribute_map = {
        'ontology_id': 'ontologyId',
        'terms': 'terms',
        'max_predictions': 'maxPredictions',
        'threshold': 'threshold'
    }

    def __init__(self, ontology_id=None, terms=None, max_predictions=None, threshold=None):  # noqa: E501
        """ReconcileToOntologyCommand - a model defined in Swagger"""  # noqa: E501
        self._ontology_id = None
        self._terms = None
        self._max_predictions = None
        self._threshold = None
        self.discriminator = None
        self.ontology_id = ontology_id
        self.terms = terms
        if max_predictions is not None:
            self.max_predictions = max_predictions
        if threshold is not None:
            self.threshold = threshold

    @property
    def ontology_id(self):
        """Gets the ontology_id of this ReconcileToOntologyCommand.  # noqa: E501

        the ID of the ontology file (sourceDocument) the terms will be reconciled against  # noqa: E501

        :return: The ontology_id of this ReconcileToOntologyCommand.  # noqa: E501
        :rtype: str
        """
        return self._ontology_id

    @ontology_id.setter
    def ontology_id(self, ontology_id):
        """Sets the ontology_id of this ReconcileToOntologyCommand.

        the ID of the ontology file (sourceDocument) the terms will be reconciled against  # noqa: E501

        :param ontology_id: The ontology_id of this ReconcileToOntologyCommand.  # noqa: E501
        :type: str
        """
        if ontology_id is None:
            raise ValueError("Invalid value for `ontology_id`, must not be `None`")  # noqa: E501

        self._ontology_id = ontology_id

    @property
    def terms(self):
        """Gets the terms of this ReconcileToOntologyCommand.  # noqa: E501

        terms to reconcile against the ontology (maximum 500)  # noqa: E501

        :return: The terms of this ReconcileToOntologyCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this ReconcileToOntologyCommand.

        terms to reconcile against the ontology (maximum 500)  # noqa: E501

        :param terms: The terms of this ReconcileToOntologyCommand.  # noqa: E501
        :type: list[str]
        """
        if terms is None:
            raise ValueError("Invalid value for `terms`, must not be `None`")  # noqa: E501

        self._terms = terms

    @property
    def max_predictions(self):
        """Gets the max_predictions of this ReconcileToOntologyCommand.  # noqa: E501

        the maximum number of predicted results to return per reconciled term  # noqa: E501

        :return: The max_predictions of this ReconcileToOntologyCommand.  # noqa: E501
        :rtype: int
        """
        return self._max_predictions

    @max_predictions.setter
    def max_predictions(self, max_predictions):
        """Sets the max_predictions of this ReconcileToOntologyCommand.

        the maximum number of predicted results to return per reconciled term  # noqa: E501

        :param max_predictions: The max_predictions of this ReconcileToOntologyCommand.  # noqa: E501
        :type: int
        """

        self._max_predictions = max_predictions

    @property
    def threshold(self):
        """Gets the threshold of this ReconcileToOntologyCommand.  # noqa: E501

        the minimum confidence threshold (range is 0-1)  # noqa: E501

        :return: The threshold of this ReconcileToOntologyCommand.  # noqa: E501
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this ReconcileToOntologyCommand.

        the minimum confidence threshold (range is 0-1)  # noqa: E501

        :param threshold: The threshold of this ReconcileToOntologyCommand.  # noqa: E501
        :type: float
        """

        self._threshold = threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReconcileToOntologyCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReconcileToOntologyCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
